<!--===========================================================================
Copyright (c) 2009, Pentaho Engineering Team
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Pentaho Corporation nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Pentaho Engineering Team ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL <copyright holder> BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
============================================================================-->
<project name="subfloor-package" basedir="." default="default" xmlns:ivy="antlib:org.apache.ivy.ant">

  <!-- Define the default location of the common build file -->
  <property name="subfloor.file"
            value="./subfloor.xml"
            description="This is the location of the standardized subfloor.xml file" />

  <!-- Import the common_build.xml file which contains all the default tasks -->
  <import file="${subfloor.file}" />

  <property name="stage.dir" value="${bin.dir}/stage" description="Package staging" />
  <property name="package.root.dir" value="${ivy.artifact.id}" description="Root directory of final zip or tar package"/>
  <property name="approot.stage.dir" value="${stage.dir}/${package.root.dir}" description="Stage application root dir" />
  <property name="package.id" value="${ivy.artifact.id}"/>
  <property name="package.basename" value="${package.id}-${project.revision}" />
  <property name="package.resdir" value="${basedir}/package-res" />

  <target name="dist" depends="jar,package" description="Builds and packages the application" />
  
  <target name="clean-dist" description="Removes all dist artifacts">
  <delete dir="${dist.dir}" />
    <delete dir="${stage.dir}" />
  </target>
  
  <!-- override of jar target.. this definitely should be moved into common build -->
  <target name="jar"
          depends="compile,set-build.id,create-version-file"
          description="Jars up the bin directory after a compile">
    <jar destfile="${dist.dir}/${ivy.artifact.id}-${project.revision}.jar">
      <manifest>
        <attribute name="Implementation-Title" value="${impl.title}" />
        <attribute name="Implementation-Version" value="${project.revision}.${build.id}" />
        <attribute name="Implementation-Vendor" value="${impl.vendor}" />
        <attribute name="Implementation-ProductID" value="${impl.productID}" />
      </manifest>
      <fileset dir="${classes.dir}" />
    </jar>
  </target>

  <target name="create-version-file">
    <propertyfile file="${classes.dir}/version.properties" comment="${impl.title} build information">
      <entry key="version" value="${project.revision}.${build.id}" />
      <entry key="builddate" type="date" value="now" />
    </propertyfile>
  </target>
  
  <target name="assemble.init">
    <mkdir dir="${approot.stage.dir}" />
  </target>

  <target name="assemble" depends="assemble.init,assemble.copy-libs">
    <copy todir="${approot.stage.dir}">
      <fileset dir="${package.resdir}" />
    </copy>
    <chmod perm="a+x" dir="${stage.dir}" includes="**/*.sh" />
  </target>
  
  <target name="assemble.copy-libs">
      <copy todir="${approot.stage.dir}/lib">
      <fileset dir="${lib.dir}" />
      <fileset file="${dist.dir}/${ivy.artifact.id}-${project.revision}.jar" />
    </copy>
  </target>

  <target name="package" depends="assemble,package-zip,package-targz" />

  <target name="package-zip">
    <zip destfile="${dist.dir}/${package.basename}.zip">
      <zipfileset dir="${stage.dir}" />
    </zip>
  </target>

  <target name="package-targz">
    <tar destfile="${dist.dir}/${package.basename}.tar.gz" longfile="gnu" compression="gzip">
      <tarfileset dir="${stage.dir}" mode="755">
        <include name="**/*.sh" />
      </tarfileset>
      <tarfileset dir="${stage.dir}">
        <exclude name="**/*.sh" />
      </tarfileset>
    </tar>
  </target>
  
    <!--=======================================================================
      publish-nojar (override)
      
      Publishes the jar and zip package to the Maven repository
      ====================================================================-->
  <target name="publish-nojar"
          depends="install-antcontrib,create-pom,ivy.deliver">
    <ant antfile="build-res/common_build.xml" target="publish-nojar" />
    
    <ivy:makepom ivyfile="package-ivy.xml" pomfile="package-pom.xml" />
    <replace file="package-pom.xml" token="jar" value="zip" />

    <antcall target="maven-publish-artifact">
      <param name="publish.pomFile" value="package-pom.xml" />
      <param name="publish.file" value="${dist.dir}/${package.basename}.zip" />
    </antcall>
  </target>
  
  <!--=======================================================================
      publish-local-nojar (override)
      
      Publishes jar and zip package locally
      ====================================================================-->
  <target name="publish-local-nojar" depends="install-ivy">
    <ant antfile="build-res/common_build.xml" target="publish-local-nojar" />
    <ivy:resolve file="package-ivy.xml" />
    <ivy:publish resolver="local" pubrevision="${project.revision}" overwrite="true" forcedeliver="true">
      <artifacts pattern="${dist.dir}/[artifact]-[revision].[ext]" />
    </ivy:publish>
  </target>

</project>