<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd">

  <!-- An access decision voter that reads VOTE_ROLE_FILE_* configuration settings -->
  <bean id="roleVoter" class="org.pentaho.platform.engine.security.PentahoSubstringRoleVoter">
    <constructor-arg value="VOTE_ROLE_FILE_" />
  </bean>

  <!-- An access decision manager used by the business objects. -->
  <bean id="businessAccessDecisionManager" class="org.springframework.security.vote.UnanimousBased">
    <property name="allowIfAllAbstainDecisions" value="false" />
    <property name="decisionVoters">
      <list>
        <ref local="roleVoter" />
      </list>
    </property>
  </bean>

  <bean id="jcrTransactionManager" class="org.springframework.extensions.jcr.jackrabbit.LocalTransactionManager">
    <property name="sessionFactory" ref="jcrSessionFactory" />
  </bean>

  <bean id="repositoryServiceTransactionInterceptor" class="org.springframework.transaction.interceptor.TransactionInterceptor">
    <property name="transactionManager" ref="jcrTransactionManager" />
    <property name="transactionAttributeSource">
      <value>
        org.pentaho.platform.api.repository.IRepositoryService.getFile=PROPAGATION_REQUIRED,readOnly
        org.pentaho.platform.api.repository.IRepositoryService.getContentForRead=PROPAGATION_REQUIRED,readOnly
        org.pentaho.platform.api.repository.IRepositoryService.getContentForExecute=PROPAGATION_REQUIRED,readOnly
        org.pentaho.platform.api.repository.IRepositoryService.createFile=PROPAGATION_REQUIRED
        org.pentaho.platform.api.repository.IRepositoryService.createFolder=PROPAGATION_REQUIRED
        org.pentaho.platform.api.repository.IRepositoryService.getChildren=PROPAGATION_REQUIRED,readOnly
        org.pentaho.platform.api.repository.IRepositoryService.updateFile=PROPAGATION_REQUIRED
        org.pentaho.platform.api.repository.IRepositoryService.getAcl=PROPAGATION_REQUIRED,readOnly
        org.pentaho.platform.api.repository.IRepositoryService.hasAccess=PROPAGATION_REQUIRED,readOnly
        org.pentaho.platform.api.repository.IRepositoryService.getEffectiveAces=PROPAGATION_REQUIRED,readOnly
        org.pentaho.platform.api.repository.IRepositoryService.setAcl=PROPAGATION_REQUIRED
        org.pentaho.platform.api.repository.IRepositoryService.deleteFile=PROPAGATION_REQUIRED
        org.pentaho.platform.api.repository.IRepositoryService.lockFile=PROPAGATION_REQUIRED
        org.pentaho.platform.api.repository.IRepositoryService.unlockFile=PROPAGATION_REQUIRED
        org.pentaho.platform.api.repository.IRepositoryService.getVersionSummaries=PROPAGATION_REQUIRED,readOnly
      </value>
    </property>
  </bean>

  <bean id="repositoryService" class="org.springframework.aop.framework.ProxyFactoryBean">
    <property name="target" ref="repositoryServiceTarget" />
    <property name="interceptorNames">
      <list>
        <idref local="repositoryServiceTransactionInterceptor" />
        <idref local="repositoryServiceMethodInterceptor" />
      </list>
    </property>
  </bean>

  <!-- The username to use to do internal work for no particular user. -->
  <bean id="repositoryAdminUsername" class="java.lang.String">
    <constructor-arg value="admin" />
  </bean>

  <!-- This token allows Jackrabbit to trust that this application has already authenticated the user. -->
  <bean id="jcrPreAuthenticationToken" class="java.lang.String">
    <constructor-arg value="ZchBOvP8q9FQ" />
  </bean>

  <!-- The name of the authority which is granted to all authenticated users, regardless of tenant. -->
  <bean id="commonAuthenticatedAuthorityName" class="java.lang.String">
    <constructor-arg value="Authenticated" />
  </bean>

  <!-- The authority name granted to the repository admin. -->
  <bean id="repositoryAdminAuthorityName" class="java.lang.String">
    <constructor-arg value="Admin" />
  </bean>

  <!-- The suffix appended to the tenantId to create a role granted to all authenticated users of a certain tenant. -->
  <bean id="tenantAuthenticatedAuthorityNameSuffix" class="java.lang.String">
    <constructor-arg value="_Authenticated" />
  </bean>

  <!-- The suffix appended to the tenantId to create a role granted to all admin users of a certain tenant. -->
  <bean id="tenantAdminAuthorityNameSuffix" class="java.lang.String">
    <constructor-arg value="_Admin" />
  </bean>

  <bean id="repositoryServiceTarget" class="org.pentaho.platform.repository.pcr.DefaultRepositoryService">
    <constructor-arg ref="repositoryFileDao" />
    <constructor-arg ref="repositoryFileAclDao" />
    <constructor-arg>
      <bean class="org.pentaho.platform.repository.pcr.DefaultRepositoryEventHandler">
        <constructor-arg ref="repositoryFileDao" />
        <constructor-arg ref="repositoryFileAclDao" />
        <constructor-arg>
          <!-- The code sets the propagation behavior to PROPAGATION_REQUIRES_NEW. -->
          <bean class="org.springframework.transaction.support.TransactionTemplate">
            <constructor-arg ref="jcrTransactionManager" />
          </bean>
        </constructor-arg>
        <constructor-arg ref="repositoryAdminUsername" />
        <constructor-arg ref="repositoryAdminAuthorityName" />
        <constructor-arg ref="commonAuthenticatedAuthorityName" />
        <constructor-arg ref="tenantAuthenticatedAuthorityNameSuffix" />
        <constructor-arg ref="tenantAdminAuthorityNameSuffix" />
      </bean>
    </constructor-arg>
  </bean>

  <!-- In create[File|Folder], the first parameter is the parentFolder. This is the object whose ACL is checked. -->
  <bean id="repositoryServiceMethodInterceptor" class="org.springframework.security.intercept.method.aopalliance.MethodSecurityInterceptor">
    <property name="validateConfigAttributes">
      <value>true</value>
    </property>
    <property name="authenticationManager">
      <ref bean="authenticationManager" />
    </property>
    <property name="accessDecisionManager">
      <ref bean="businessAccessDecisionManager" />
    </property>
    <property name="objectDefinitionSource">
      <value>
        org.pentaho.platform.api.repository.IRepositoryService.getFile=VOTE_ROLE_FILE_Authenticated
        org.pentaho.platform.api.repository.IRepositoryService.getContentForRead=VOTE_ROLE_FILE_Authenticated
        org.pentaho.platform.api.repository.IRepositoryService.getContentForExecute=VOTE_ROLE_FILE_Authenticated
        org.pentaho.platform.api.repository.IRepositoryService.createFile=VOTE_ROLE_FILE_Authenticated
        org.pentaho.platform.api.repository.IRepositoryService.createFolder=VOTE_ROLE_FILE_Authenticated
        org.pentaho.platform.api.repository.IRepositoryService.getChildren=VOTE_ROLE_FILE_Authenticated
        org.pentaho.platform.api.repository.IRepositoryService.updateFile=VOTE_ROLE_FILE_Authenticated
        org.pentaho.platform.api.repository.IRepositoryService.getAcl=VOTE_ROLE_FILE_Authenticated
        org.pentaho.platform.api.repository.IRepositoryService.hasAccess=VOTE_ROLE_FILE_Authenticated
        org.pentaho.platform.api.repository.IRepositoryService.getEffectiveAces=VOTE_ROLE_FILE_Authenticated
        org.pentaho.platform.api.repository.IRepositoryService.setAcl=VOTE_ROLE_FILE_Authenticated
        org.pentaho.platform.api.repository.IRepositoryService.deleteFile=VOTE_ROLE_FILE_Authenticated
        org.pentaho.platform.api.repository.IRepositoryService.lockFile=VOTE_ROLE_FILE_Authenticated
        org.pentaho.platform.api.repository.IRepositoryService.unlockFile=VOTE_ROLE_FILE_Authenticated
        org.pentaho.platform.api.repository.IRepositoryService.getVersionSummaries=VOTE_ROLE_FILE_Authenticated
      </value>
    </property>
  </bean>

  <!-- Jackrabbit repo automatically shut down when Spring application context closed (DisposableBean) -->
  <bean id="jcrRepository" class="org.springframework.extensions.jcr.jackrabbit.RepositoryFactoryBean">
    <property name="configuration" value="/jackrabbit/repository.xml" />
    <property name="homeDir" value="/jackrabbit/repository" />
  </bean>

  <bean id="jcrSessionFactory" class="org.pentaho.platform.repository.pcr.jcr.sejcr.CredentialsStrategyJackrabbitSessionFactory">
    <constructor-arg ref="jcrRepository" />
    <constructor-arg>
      <bean class="org.pentaho.platform.repository.pcr.jcr.sejcr.PentahoSessionCredentialsStrategy">
        <constructor-arg ref="jcrPreAuthenticationToken" />
      </bean>
    </constructor-arg>
    <property name="namespaces">
      <props>
        <prop key="pho">http://www.pentaho.org/jcr/1.0</prop>
        <prop key="pho_nt">http://www.pentaho.org/jcr/nt/1.0</prop>
        <prop key="pho_mix">http://www.pentaho.org/jcr/mix/1.0</prop>
      </props>
    </property>
    <property name="nodeDefinitions">
      <list>
        <value>classpath:/org/pentaho/platform/repository/pcr/jcr/jackrabbit/pentahoFile.cnd</value>
        <value>classpath:/org/pentaho/platform/repository/pcr/jcr/jackrabbit/pentahoResource.cnd</value>
        <value>classpath:/org/pentaho/platform/repository/pcr/jcr/jackrabbit/pentahoLockable.cnd</value>
        <value>classpath:/org/pentaho/platform/repository/pcr/jcr/jackrabbit/pentahoInternalFolder.cnd</value>
        <value>classpath:/org/pentaho/platform/repository/pcr/jcr/jackrabbit/pentahoLockTokenStorage.cnd</value>
        <value>classpath:/org/pentaho/platform/repository/pcr/jcr/jackrabbit/pentahoVersionable.cnd</value>
        <value>classpath:/org/pentaho/platform/repository/pcr/jcr/jackrabbit/pentahoAcl.cnd</value>
      </list>
    </property>
  </bean>

  <bean id="jcrTemplate" class="org.springframework.extensions.jcr.JcrTemplate">
    <property name="sessionFactory" ref="jcrSessionFactory" />
    <property name="allowCreate" value="false" />
    <property name="exposeNativeSession" value="true" />
  </bean>

  <bean id="repositoryFileDao" class="org.pentaho.platform.repository.pcr.jcr.JcrRepositoryFileDao">
    <constructor-arg ref="jcrTemplate" />
    <constructor-arg>
      <list>
        <bean class="org.pentaho.platform.repository.pcr.jcr.transform.SimpleRepositoryFileContentTransformer" />
        <bean id="runResultRepositoryFileContentTransformer" class="org.pentaho.platform.repository.pcr.jcr.transform.RunResultRepositoryFileContentTransformer">
          <constructor-arg>
            <bean class="org.pentaho.platform.repository.pcr.jcr.transform.SimpleRepositoryFileContentTransformer" />
          </constructor-arg>
        </bean>
      </list>
    </constructor-arg>
  </bean>

  <bean class="org.pentaho.platform.repository.pcr.spring.RepositoryEventHandlerAuthenticationSuccessListener">
    <constructor-arg ref="repositoryService" />
  </bean>

  <bean id="repositoryFileAclDao" class="org.pentaho.platform.repository.pcr.jcr.jackrabbit.JackrabbitRepositoryFileAclDao">
    <constructor-arg ref="jcrTemplate" />
  </bean>


</beans>
