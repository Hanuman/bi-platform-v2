<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd">

  <!--
  - Application context containing authentication beans.
  -
  - Used by all artifacts.
  -
  -->

  <!-- ~~~~~~~~~~~~~~~~~~ "BEFORE INVOCATION" AUTHORIZATION DEFINITIONS ~~~~~~~~~~~~~~~~ -->

  <!-- ACL permission masks used by this application -->
  <bean id="RepositoryFilePermission.READ" class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean">
    <property name="staticField" value="org.pentaho.platform.repository.pcr.springsecurity.RepositoryFilePermission.READ" />
  </bean>
  <bean id="RepositoryFilePermission.DELETE" class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean">
    <property name="staticField" value="org.pentaho.platform.repository.pcr.springsecurity.RepositoryFilePermission.DELETE" />
  </bean>
  <bean id="RepositoryFilePermission.EXECUTE" class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean">
    <property name="staticField" value="org.pentaho.platform.repository.pcr.springsecurity.RepositoryFilePermission.EXECUTE" />
  </bean>
  <bean id="RepositoryFilePermission.APPEND" class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean">
    <property name="staticField" value="org.pentaho.platform.repository.pcr.springsecurity.RepositoryFilePermission.APPEND" />
  </bean>
  <bean id="RepositoryFilePermission.WRITE" class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean">
    <property name="staticField" value="org.pentaho.platform.repository.pcr.springsecurity.RepositoryFilePermission.WRITE" />
  </bean>
  <bean id="RepositoryFilePermission.DELETE_CHILD" class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean">
    <property name="staticField" value="org.pentaho.platform.repository.pcr.springsecurity.RepositoryFilePermission.DELETE_CHILD" />
  </bean>
  <bean id="RepositoryFilePermission.READ_ACL" class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean">
    <property name="staticField" value="org.pentaho.platform.repository.pcr.springsecurity.RepositoryFilePermission.READ_ACL" />
  </bean>
  <bean id="RepositoryFilePermission.WRITE_ACL" class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean">
    <property name="staticField" value="org.pentaho.platform.repository.pcr.springsecurity.RepositoryFilePermission.WRITE_ACL" />
  </bean>

  <!-- An access decision voter that reads VOTE_ROLE_FILE_* configuration settings -->
  <bean id="roleVoter" class="org.pentaho.platform.engine.security.PentahoSubstringRoleVoter">
    <constructor-arg value="VOTE_ROLE_FILE_" />
  </bean>

  <!-- An access decision voter that reads VOTE_ACL_FILE_EXECUTE configuration settings. -->
  <!-- For this voter to grant access, the domain object has to have an ACE with only one of the bits below. -->
  <bean id="aclFileExecuteVoter" class="org.pentaho.platform.repository.pcr.springsecurity.AdminAclEntryVoter">
    <constructor-arg ref="aclService" />
    <constructor-arg value="VOTE_ACL_FILE_EXECUTE" />
    <constructor-arg>
      <list>
        <ref local="RepositoryFilePermission.EXECUTE" />
      </list>
    </constructor-arg>
    <constructor-arg ref="repositoryAdminAuthorityName" />
    <property name="processDomainObjectClass" value="org.pentaho.platform.api.repository.RepositoryFile" />
  </bean>

  <!-- An access decision manager used by the business objects. -->
  <bean id="businessAccessDecisionManager" class="org.springframework.security.vote.UnanimousBased">
    <property name="allowIfAllAbstainDecisions" value="false" />
    <property name="decisionVoters">
      <list>
        <ref local="roleVoter" />
        <ref local="aclFileExecuteVoter" />
      </list>
    </property>
  </bean>

  <!-- ============== "AFTER INTERCEPTION" AUTHORIZATION DEFINITIONS =========== -->

  <bean id="afterInvocationManager" class="org.springframework.security.afterinvocation.AfterInvocationProviderManager">
    <property name="providers">
      <list>
        <ref local="afterAclTraverse" />
      </list>
    </property>
  </bean>

  <!-- Processes AFTER_ACL_TRAVERSE configuration settings -->
  <!-- For this "after" to grant access, the domain object has to have an ACE with only one of the bits below. -->
  <bean id="afterAclTraverse" class="org.pentaho.platform.repository.pcr.springsecurity.TraverseFolderAclEntryAfterInvocationProvider">
    <constructor-arg ref="aclService" />
    <constructor-arg value="AFTER_ACL_TRAVERSE" />
    <constructor-arg>
      <list>
        <ref local="RepositoryFilePermission.EXECUTE" />
      </list>
    </constructor-arg>
    <constructor-arg ref="repositoryAdminAuthorityName" />
    <constructor-arg ref="pentahoContentDao" />
  </bean>

  <!--************************************************************************************************************** -->

  <bean id="jcrTransactionManager" class="org.springframework.extensions.jcr.jackrabbit.LocalTransactionManager">
    <property name="sessionFactory" ref="jcrSessionFactory"/>
  </bean>

  <bean id="pentahoContentRepositoryTransactionInterceptor" class="org.springframework.transaction.interceptor.TransactionInterceptor">
    <property name="transactionManager" ref="jcrTransactionManager" />
    <property name="transactionAttributeSource">
      <value>
        org.pentaho.platform.api.repository.IPentahoContentRepository.getFile=PROPAGATION_REQUIRED,readOnly
        org.pentaho.platform.api.repository.IPentahoContentRepository.getContentForRead=PROPAGATION_REQUIRED,readOnly
        org.pentaho.platform.api.repository.IPentahoContentRepository.getContentForExecute=PROPAGATION_REQUIRED,readOnly
        org.pentaho.platform.api.repository.IPentahoContentRepository.createFile=PROPAGATION_REQUIRED
        org.pentaho.platform.api.repository.IPentahoContentRepository.createFolder=PROPAGATION_REQUIRED
        org.pentaho.platform.api.repository.IPentahoContentRepository.getChildren=PROPAGATION_REQUIRED,readOnly
        org.pentaho.platform.api.repository.IPentahoContentRepository.updateFile=PROPAGATION_REQUIRED
        org.pentaho.platform.api.repository.IPentahoContentRepository.getAcl=PROPAGATION_REQUIRED,readOnly
        org.pentaho.platform.api.repository.IPentahoContentRepository.deleteFile=PROPAGATION_REQUIRED
        org.pentaho.platform.api.repository.IPentahoContentRepository.lockFile=PROPAGATION_REQUIRED
        org.pentaho.platform.api.repository.IPentahoContentRepository.unlockFile=PROPAGATION_REQUIRED
        org.pentaho.platform.api.repository.IPentahoContentRepository.getVersionSummaries=PROPAGATION_REQUIRED,readOnly
        </value>
    </property>
  </bean>

  <bean id="pentahoContentRepository" class="org.springframework.aop.framework.ProxyFactoryBean">
    <property name="target" ref="pentahoContentRepositoryTarget" />
    <property name="interceptorNames">
      <list>
        <idref local="pentahoContentRepositoryTransactionInterceptor" />
        <idref local="pentahoContentRepositoryMethodInterceptor" />
      </list>
    </property>
  </bean>

  <!-- The username to use to do internal work for no particular user. -->
  <bean id="repositoryAdminUsername" class="java.lang.String">
    <constructor-arg value="admin" />
  </bean>

  <!-- The name of the authority which is granted to all authenticated users, regardless of tenant. -->
  <bean id="commonAuthenticatedAuthorityName" class="java.lang.String">
    <constructor-arg value="Authenticated" />
  </bean>
  
  <!-- The authority name granted to the repository admin. -->
  <bean id="repositoryAdminAuthorityName" class="java.lang.String">
    <constructor-arg value="Admin" />
  </bean>

  <!-- The suffix appended to the tenantId to create a role granted to all authenticated users of a certain tenant. -->
  <bean id="tenantAuthenticatedAuthorityNameSuffix" class="java.lang.String">
    <constructor-arg value="_Authenticated" />
  </bean>
  
    <!-- The suffix appended to the tenantId to create a role granted to all admin users of a certain tenant. -->
  <bean id="tenantAdminAuthorityNameSuffix" class="java.lang.String">
    <constructor-arg value="_Admin" />
  </bean>

  <bean id="pentahoContentRepositoryTarget" class="org.pentaho.platform.repository.pcr.PentahoContentRepository">
    <constructor-arg ref="pentahoContentDao" />
    <constructor-arg ref="aclService" />
    <constructor-arg>
      <bean class="org.pentaho.platform.repository.pcr.DefaultRepositoryEventHandler">
        <constructor-arg ref="pentahoContentDao" />
        <constructor-arg ref="aclService" />
        <constructor-arg>
          <!-- The code sets the propagation behavior to PROPAGATION_REQUIRES_NEW. -->
          <bean class="org.springframework.transaction.support.TransactionTemplate">
            <constructor-arg ref="jcrTransactionManager" />
          </bean> 
        </constructor-arg>
        <constructor-arg ref="repositoryAdminUsername" />
        <constructor-arg ref="repositoryAdminAuthorityName" />
        <constructor-arg ref="commonAuthenticatedAuthorityName" />
        <constructor-arg ref="tenantAuthenticatedAuthorityNameSuffix" />
        <constructor-arg ref="tenantAdminAuthorityNameSuffix" />
      </bean>
    </constructor-arg>
  </bean>
  
  <!-- In create[File|Folder], the first parameter is the parentFolder. This is the object whose ACL is checked. -->
  <bean id="pentahoContentRepositoryMethodInterceptor" class="org.springframework.security.intercept.method.aopalliance.MethodSecurityInterceptor">
    <property name="validateConfigAttributes">
      <value>true</value>
    </property>
    <property name="authenticationManager">
      <ref bean="authenticationManager" />
    </property>
    <property name="accessDecisionManager">
      <ref bean="businessAccessDecisionManager" />
    </property>
    <property name="afterInvocationManager">
      <ref bean="afterInvocationManager" />
    </property>
    <property name="objectDefinitionSource">
      <value>
        org.pentaho.platform.api.repository.IPentahoContentRepository.getFile=VOTE_ROLE_FILE_Authenticated
        org.pentaho.platform.api.repository.IPentahoContentRepository.getContentForRead=VOTE_ROLE_FILE_Authenticated
        org.pentaho.platform.api.repository.IPentahoContentRepository.getContentForExecute=VOTE_ROLE_FILE_Authenticated
        org.pentaho.platform.api.repository.IPentahoContentRepository.createFile=VOTE_ROLE_FILE_Authenticated
        org.pentaho.platform.api.repository.IPentahoContentRepository.createFolder=VOTE_ROLE_FILE_Authenticated
        org.pentaho.platform.api.repository.IPentahoContentRepository.getChildren=VOTE_ROLE_FILE_Authenticated
        org.pentaho.platform.api.repository.IPentahoContentRepository.updateFile=VOTE_ROLE_FILE_Authenticated
        org.pentaho.platform.api.repository.IPentahoContentRepository.getAcl=VOTE_ROLE_FILE_Authenticated
        org.pentaho.platform.api.repository.IPentahoContentRepository.deleteFile=VOTE_ROLE_FILE_Authenticated
        org.pentaho.platform.api.repository.IPentahoContentRepository.lockFile=VOTE_ROLE_FILE_Authenticated
        org.pentaho.platform.api.repository.IPentahoContentRepository.unlockFile=VOTE_ROLE_FILE_Authenticated
        org.pentaho.platform.api.repository.IPentahoContentRepository.getVersionSummaries=VOTE_ROLE_FILE_Authenticated
      </value>
    </property>
  </bean>

  <!-- Jackrabbit repo automatically shut down when Spring application context closed (DisposableBean) -->
  <bean id="jcrRepository" class="org.springframework.extensions.jcr.jackrabbit.RepositoryFactoryBean">
    <property name="configuration" value="/jackrabbit/repository.xml" />
    <property name="homeDir" value="/jackrabbit/repository" />
  </bean>

  <bean id="jcrSessionFactory" class="org.pentaho.platform.repository.pcr.jcr.sejcr.CredentialsStrategyJackrabbitSessionFactory">
    <constructor-arg ref="jcrRepository" />
    <constructor-arg ref="credentialsStrategy" />
    <property name="namespaces">
      <props>
        <prop key="pho">http://www.pentaho.org/jcr/1.0</prop>
        <prop key="pho_nt">http://www.pentaho.org/jcr/nt/1.0</prop>
        <prop key="pho_mix">http://www.pentaho.org/jcr/mix/1.0</prop>
      </props>
    </property>
    <property name="nodeDefinitions">
      <list>
        <value>classpath:/org/pentaho/platform/repository/pcr/jcr/jackrabbit/pentahoFile.cnd</value>
        <value>classpath:/org/pentaho/platform/repository/pcr/jcr/jackrabbit/pentahoResource.cnd</value>
        <value>classpath:/org/pentaho/platform/repository/pcr/jcr/jackrabbit/pentahoLockable.cnd</value>
        <value>classpath:/org/pentaho/platform/repository/pcr/jcr/jackrabbit/pentahoInternalFolder.cnd</value>
        <value>classpath:/org/pentaho/platform/repository/pcr/jcr/jackrabbit/pentahoLockTokenStorage.cnd</value>
        <value>classpath:/org/pentaho/platform/repository/pcr/jcr/jackrabbit/pentahoVersionable.cnd</value>
      </list>
    </property>
  </bean>

  <bean id="credentialsStrategy" class="org.pentaho.platform.repository.pcr.jcr.sejcr.PentahoSessionCredentialsStrategy" />

  <bean id="jcrTemplate" class="org.springframework.extensions.jcr.JcrTemplate">
    <property name="sessionFactory" ref="jcrSessionFactory" />
    <property name="allowCreate" value="false" />
    <property name="exposeNativeSession" value="true" />
  </bean>

  <bean id="pentahoContentDao" class="org.pentaho.platform.repository.pcr.jcr.JcrRepositoryFileDao">
    <constructor-arg ref="jcrTemplate" />
    <constructor-arg>
      <list>
        <bean class="org.pentaho.platform.repository.pcr.jcr.transform.SimpleRepositoryFileContentTransformer" />
        <bean id="runResultRepositoryFileContentTransformer" class="org.pentaho.platform.repository.pcr.jcr.transform.RunResultRepositoryFileContentTransformer">
          <constructor-arg>
            <bean class="org.pentaho.platform.repository.pcr.jcr.transform.SimpleRepositoryFileContentTransformer" />
          </constructor-arg>
        </bean>
      </list>
    </constructor-arg>
    <constructor-arg>
      <bean class="org.pentaho.platform.repository.pcr.jcr.DefaultLockTokenHelper" />
    </constructor-arg>
  </bean>

  <bean class="org.pentaho.platform.repository.pcr.spring.CreateUserHomeFolderAuthenticationSuccessListener">
    <constructor-arg ref="pentahoContentRepository" />
  </bean>

</beans>
