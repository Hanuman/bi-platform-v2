package org.pentaho.platform.repository.pcr.springsecurity;

import javax.sql.DataSource;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;

public class JdbcAclServicePreparer implements AclServicePreparer {

  // ~ Static fields/initializers ======================================================================================

  private static final Log logger = LogFactory.getLog(JdbcAclServicePreparer.class);

  /**
   * Default DDL suitable for HSQLDB.
   */
  private static final String DEFAULT_DDL = "create table acl_sid (id bigint generated by default as identity(start with 100) not null primary key,principal boolean not null,sid varchar_ignorecase(100) not null,constraint unique_uk_1 unique(sid,principal) );create table acl_class (id bigint generated by default as identity(start with 100) not null primary key,class varchar_ignorecase(100) not null,constraint unique_uk_2 unique(class) );create table acl_object_identity (id bigint generated by default as identity(start with 100) not null primary key,object_id_class bigint not null,object_id_identity varchar_ignorecase(100) not null,parent_object bigint,owner_sid bigint not null,entries_inheriting boolean not null,constraint unique_uk_3 unique(object_id_class,object_id_identity),constraint foreign_fk_1 foreign key(parent_object)references acl_object_identity(id),constraint foreign_fk_2 foreign key(object_id_class)references acl_class(id),constraint foreign_fk_3 foreign key(owner_sid)references acl_sid(id) );create table acl_entry (id bigint generated by default as identity(start with 100) not null primary key,acl_object_identity bigint not null,ace_order int not null,sid bigint not null,mask integer not null,granting boolean not null,audit_success boolean not null,audit_failure boolean not null,constraint unique_uk_4 unique(acl_object_identity,ace_order),constraint foreign_fk_4 foreign key(acl_object_identity)references acl_object_identity(id),constraint foreign_fk_5 foreign key(sid) references acl_sid(id) );";

  private static final String DEFAULT_PREVIOUSLY_RUN_TEST_QUERY = "select id from acl_entry";

  // ~ Instance fields =================================================================================================

  private JdbcTemplate jdbcTemplate;

  private String ddl = DEFAULT_DDL;

  private String previouslyRunTestQuery = DEFAULT_PREVIOUSLY_RUN_TEST_QUERY;

  // ~ Constructors ====================================================================================================

  public JdbcAclServicePreparer(final DataSource dataSource) {
    super();
    this.jdbcTemplate = new JdbcTemplate(dataSource);
  }

  // ~ Methods =========================================================================================================

  public void prepareAclServiceIfNecessary() {
    if (!hasPreviouslyRun()) {
      jdbcTemplate.execute(ddl);
    }
  }

  private boolean hasPreviouslyRun() {
    try {
      jdbcTemplate.execute(previouslyRunTestQuery);
      return true;
    } catch (DataAccessException e) {
      return false;
    }
  }

  public void setDdl(final String ddl) {
    this.ddl = ddl;
  }

  public void setPreviouslyRunTestQuery(final String previouslyRunTestQuery) {
    this.previouslyRunTestQuery = previouslyRunTestQuery;
  }

}