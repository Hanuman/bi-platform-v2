<!-- 
		This file is used by release engineering to build and publish Open BI Platform artifacts.
     	Please do not edit this file for use in a development environment.   Use dev_build.xml instead.
-->

<project name="Pentaho BI Platform Open Build" basedir=".">

	<property file="override.properties" />
	<property file="build.properties" />

	<property name="publishTo" value="publish-local" />
	
	<import file="common.xml" />

	<!--=======================================================================
        set-build.id
    
        Sets a property build.id to the either "development" or the svn revision
        if in release mode
        ====================================================================-->
	<target name="set-build.id" unless="build.id" depends="install-antcontrib">
		<if>
			<istrue value="${release}" />
			<then>
				<antcallback target="svn-revision" return="svn.revision" />
				<property name="build.id" value="${svn.revision}" />
			</then>
			<else>
				<property name="build.id" value="development" />
			</else>
		</if>
	</target>


	<!--=======================================================================
        publish-all-pentaho
    
        cleans, resolves, and publishes all platform projects serially.
        Note the release process depends on this target working this way, please
        talk to the release manager if you need to change this target.
        ====================================================================-->
	<target name="publish-all" depends="set-build.id" description="cleans, resolves, and publishes all platform projects serially">
		<sequential>
			<ant antfile="build.xml" dir="../bi-platform-api">
				<target name="clean-all" />
				<target name="resolve" />
				<target name="${publishTo}" />
			</ant>		
			<ant antfile="build.xml" dir="../bi-platform-util">
				<target name="clean-all" />
				<target name="resolve" />
				<target name="${publishTo}" />
			</ant>
			<ant antfile="build.xml" dir="../bi-platform-engine-core">
				<target name="clean-all" />
				<target name="resolve" />
				<target name="${publishTo}" />
			</ant>
			<ant antfile="build.xml" dir="../bi-platform-test-foundation">
				<target name="clean-all" />
				<target name="resolve" />
				<target name="${publishTo}" />
			</ant>
			<ant antfile="build.xml" dir="../bi-platform-engine-security">
				<target name="clean-all" />
				<target name="resolve" />
				<target name="${publishTo}" />
			</ant>
			<ant antfile="build.xml" dir="../bi-platform-engine-services">
				<target name="clean-all" />
				<target name="resolve" />
				<target name="${publishTo}" />
			</ant>
			<ant antfile="build.xml" dir="../bi-platform-repository">
				<target name="clean-all" />
				<target name="resolve" />
				<target name="${publishTo}" />
			</ant>
			<ant antfile="build.xml" dir="../bi-platform-ui-foundation">
				<target name="clean-all" />
				<target name="resolve" />
				<target name="${publishTo}" />
			</ant>
			<ant antfile="build.xml" dir="../bi-platform-plugin-services">
				<target name="clean-all" />
				<target name="resolve" />
				<target name="${publishTo}" />
			</ant>
			<ant antfile="build.xml" dir="../bi-platform-plugin-actions">
				<target name="clean-all" />
				<target name="resolve" />
				<target name="${publishTo}" />
			</ant>
			<ant antfile="build.xml" dir="../bi-platform-scheduler">
				<target name="clean-all" />
				<target name="resolve" />
				<target name="${publishTo}" />
			</ant>
			<ant antfile="build.xml" dir="../bi-platform-legacy">
				<target name="clean-all" />
				<target name="resolve" />
				<target name="${publishTo}" />
			</ant>
			<ant antfile="build.xml" dir="../bi-platform-web">
				<target name="clean-all" />
				<target name="resolve" />
				<target name="${publishTo}" />
			</ant>
			<ant antfile="build.xml" dir="../bi-platform-web-servlet">
				<target name="clean-all" />
				<target name="resolve" />
				<target name="${publishTo}" />
			</ant>
			<ant antfile="build.xml" dir="../bi-platform-web-portlet">
				<target name="clean-all" />
				<target name="resolve" />
				<target name="${publishTo}" />
			</ant>
			<ant antfile="build.xml" dir="../mantle">
				<target name="clean-all" />
				<target name="resolve" />
				<target name="${publishTo}" />
			</ant>
      <ant antfile="build.xml" dir="../bi-platform-sample-data">
        <target name="${publishTo}" />
      </ant>
		</sequential>
	</target>
	
	<!--=======================================================================
        dist-all-javadoc
    
        cleans, resolves, generates and copies all platform javadocs serially.
        Note: the release process depends on this target working this way, please
        talk to the release manager if you need to change this target.
        ====================================================================-->	
	
	<target name="dist-all-javadoc" description="cleans, resolves, generates and copies all platform javadocs serially">
			<sequential>
			  	<property name="bi.javadoc.list" value="bi-platform-api,
			  											bi-platform-util,
			  											bi-platform-engine-core,
			  											bi-platform-test-foundation,
			  											bi-platform-engine-security,
			  											bi-platform-engine-services,
			  											bi-platform-repository,
			  											bi-platform-ui-foundation,
			  											bi-platform-plugin-services,
			  											bi-platform-plugin-actions,
			  											bi-platform-scheduler,
			  											bi-platform-legacy,
			  											bi-platform-web,
			  											bi-platform-web-servlet,
			  											bi-platform-web-portlet,
	  	  												mantle"/>
				<property name="platform.javadoc.dir" value="${basedir}/javadoc-dist" />
				<delete dir="${platform.javadoc.dir}" />
				<mkdir dir="${platform.javadoc.dir}" />
				<for list="${bi.javadoc.list}" param="module" trim="true">
					<sequential>
						<ant antfile="build.xml" dir="../@{module}">
							<target name="clean-all" />
							<target name="resolve" />
							<target name="dist-javadoc" />
						</ant>
						<copy todir="${platform.javadoc.dir}">
							<fileset dir="../@{module}/dist" includes="**/*javadoc.*" />
						</copy>
					</sequential>
				</for>
			</sequential>
		</target>
  
  
  
    <!-- ================================================================================= 
          target: ONE CLICK CE BUILD.
          note: This build is to be used by the Atlassian Bamboo BMS as implemented by
                the buildguy.  This target will build, assemble, distribute and promote
                Pentaho CE.  This target also assumes the availability of IVY and the artifact
                repository. This target is NOT for development use therefore no description
                attribute exists for this target. -ejh             
         ============================================================================== -->
    <target name="build-ce" depends="install-svnant,publish-all">
      <sequential>
        <property name="console" value="pentaho-open-admin-console"/>

        <!-- pull necessary projects into this file structure -->
        <svn username="${scp.user}" password="${scp.pwd}">
         <checkout url="svn://source.pentaho.org/svnroot/${console}/${branch}" revision="HEAD" destPath="pentaho-open-admin-console" />
        </svn>
                
        <!-- Build PAC after publish-all -->
        <ant antfile="${pac.build.dir}/build.xml">
          <target name="continuous-testless" />
          <target name="publish-pentaho" />
        </ant>
        <!-- Build CE assembly -->
        <ant antfile="assembly.xml">
          <target name="clean-all" />
          <target name="resolve" />
          <target name="package" />
        </ant>
        <!-- Build CE manual assembly -->
        <ant antfile="manual_assembly.xml">
          <target name="clean-stage" />
          <target name="assemble" />
          <target name="package-zip" />
        </ant>
        <!-- Collect all the source jars -->
        <mkdir dir="temp-src-jars"/>
        <exec executable="/bin/find">
          <arg line=". -name *source*jar -exec cp {} temp-src-jars \;"/>
        </exec>
        
        <!-- SCP all CE binaries to PentahoNightly-->
        <!-- server -->
        <scp todir="${scp.user}:${scp.pwd}@${scp.host}:${scp.dest}/${project.revision}">
	      <fileset dir="${scp.ce.source}">
	        <include name="**/*.zip"/>
	        <exclude name="**/*manual*.zip"/>	        
	      </fileset>
        </scp>
        <!-- source jars -->
        <scp todir="${scp.user}:${scp.pwd}@${scp.host}:${scp.dest}/${project.revision}">        
          <fileset dir="${scp.source}">
            <include name="**/*.*"/>
          </fileset>
	    </scp>        
     </sequential>  
    </target>


</project>