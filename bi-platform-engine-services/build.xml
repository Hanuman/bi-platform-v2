<!--===========================================================================
  This is the build file for the Pentaho BI Platform Engine Services project.
  
  This build file will use the common_build.xml file as the default build
  process and should only override the tasks that need to differ from
  the common build file.
  
  See common_build.xml for more details
============================================================================-->
<project name="Engine Services" basedir="." default="jar" 
	xmlns:ivy="antlib:org.apache.ivy.ant" >
	
	<description>
	  This build file is used to create the Engine Services project
		and works with the common_build.xml file.
	</description>

	<!-- Define the default location of the common build file -->
	<property name="common.build.file" value="./common_build.xml" 
		description="This is the location of the standardized common_build.xml file"/>

	<!-- Import the common_build.xml file which contains all the default tasks -->
	<import file="${common.build.file}"/>

    <!--
      AS STATED ABOVE, THE ONLY TASKS THAT SHOULD EXIST IN THIS BUILD FILE ARE
      THE TASKS THAT NEED TO DIFFER FROM THE DEFAULT IMPLEMENTATION OF THE TASKS
      FOUND IN common_build.xml.
    --> 

	  <property name="testjar.src.dir" value="${basedir}/test-jar-src" description="Test jar source code directory" />
	  <property name="testjar.classes.dir" value="${basedir}/test-jar-bin" description="Test jar bin directory" />
	  <property name="testjar.dist.dir" value="${basedir}/test-jar-lib" description="Test jar bin directory" />

	  <target name="compile"
	          depends="init, compile.pre, compile.compile, compile.src_copy, compile.res_copy, compile.lic_copy, compile.post, testjar"
	          description="Performs all the steps to prepare the bin directory with a complete compilation" />

	  <target name="testjar" description="Creates the test jar for the solution classloader tests">
	    <delete dir="${testjar.classes.dir}" />
	    <delete dir="${testjar.dist.dir}" />
	    <mkdir dir="${testjar.classes.dir}" />
	    <mkdir dir="${testjar.dist.dir}" />
	    <javac destdir="${testjar.classes.dir}"
	           debug="${javac.debug}"
	           deprecation="${javac.deprecation}"
	           fork="false"
	           source="${javac.source}"
	           target="${javac.target}">
	        <classpath>
	          <path refid="classpath" />
	        </classpath>
	      <src path="${testjar.src.dir}" />
	    </javac>
	    <copy todir="${testjar.classes.dir}">
	      <fileset dir="${testjar.src.dir}" includes="**/*.xml **/*.properties" />
	    </copy>
	  	
      	<jar destfile="${testjar.dist.dir}/test-jar.jar">
          <fileset dir="${testjar.classes.dir}" />
        </jar>

	  	<!-- now create a bogus jar file -->
	    <copy todir="${testjar.dist.dir}">
	      <fileset dir="${testjar.src.dir}" includes="test1.xml" />
	    </copy>
	  	
	  	<move file="${testjar.dist.dir}/test1.xml" tofile="${testjar.dist.dir}/bad.jar"/>

	  </target>
	
</project>
