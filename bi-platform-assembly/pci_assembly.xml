<project name="pci-assembly">

	<!-- ================================================================
		PROPERTIES
		
		Do not add properties to this file. All properties are defined 
		in the pci_assembly.properites file. If you need to override a property
		that is in the mantel_assembly.properites file, use an override.properties file.
	  ===================================================================== -->

	<property file="override.properties" />
	<property file="pci_assembly.properties" />

	<!-- ========================================================================
		TASKS
		
		Please define all external tasks at this level.
		===================================================================== -->


	<taskdef name="xmltask" classname="com.oopsconsultancy.xmltask.ant.XmlTask">
		<classpath>
			<pathelement location="${xmltask.jar}" />
		</classpath>
	</taskdef>


	<!-- ========================================================================
		CONDITIONS / TOP-LEVEL Elements
		
		Please define conditions and other top-level elements at this level. What is 
		a top-level element? To find out, use Eclipse's Outline mode and switch the 
		Show/Hide Top Level Elements button. 
		======================================================================= -->
	<tstamp>
		<format property="current.date" pattern="MM-dd-yyyy" locale="en" />
	</tstamp>

	<path id="classpath">
		<fileset dir="${project.lib}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${thirdparty.lib}/test-lib">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<condition property="jre.dir.not.set">
		<equals arg1="${jre.dir}" arg2="jre.dir not set" />
	</condition>

	<condition property="javac.path.not.set">
		<equals arg1="${javac.path}" arg2="javac.path not set" />
	</condition>


	<!-- ==============================================================================
		 target: clean-dist

		 This target cleans anything that may have been created by this build file.
		 =========================================================================== -->
	<target name="clean-dist">
		<delete dir="${dist.dir}" />
	</target>

	<!-- =================================
		  target: clean-pentaho-biserver-hsqldb-zip
		 ================================= -->
	<target name="clean-pentaho-biserver-hsqldb-zip">
		<delete file="${dist.dir}/pentaho_demo_hsqldb*.zip" />
	</target>

	<!-- =================================
		  target: clean-pentaho-biserver-hsqldb-tar
		 ================================= -->
	<target name="clean-pentaho-biserver-hsqldb-tar">
		<delete file="${dist.dir}/pentaho_demo_hsqldb*.tar" />
	</target>

	<!-- =======================================
		  target: clean-pentaho-biserver-mysql-zip
		  ===================================== -->
	<target name="clean-pentaho-biserver-mysql-zip">
		<delete file="${dist.dir}/pentaho_demo_mysql*.zip" />
	</target>

	<!-- =================================
		  target: clean-pentaho-biserver-mysql-tar
		 ================================= -->
	<target name="clean-pentaho-biserver-mysql-tar">
		<delete file="${dist.dir}/pentaho_demo_mysql*.tar" />
	</target>

	<!-- ================================= 
          target: clean-pentaho-metadata              
         ================================= -->
	<target name="clean-pentaho-metadata">
		<delete dir="${build.solutions.dir}" />
	</target>


	<!-- ====================================================================
		INIT TARGETS
		
		This build process relies heavily on initialization. If anything is 
		going to occur, there should be an initialization step. Hey, just like
		your Java objects! Most initialization involves creating a working
		directory inside the build directory. This is done to keep your 
		developement environment separate from the build environment. For example,
		some resource files contain tokens that get replaced during the build.
		The initialization targets will create a working directory, copy the
		resources to the working directory, and make the replacements in the 
		build environment. That way, your dev environment is clean and you can
		also usethe build directory to debug if things go wrong. There is a 
		trail, so to speak. 
		
		If you create an init target, you will probably need to create a
		corresponding clean target.
		================================================================== -->


	<!-- ===================================================================
        target: init-all
        
        If you create an initialization target, please add the target to 
        the depends attribute.            
       =================================================================== -->
	<target name="init-all" depends="init-pentaho-doc,
		init-pentaho-javadoc,
		init-pentaho-data,
		init-pentaho-res,
		init-pentaho-third-party,
		init-pentaho-metadata" />

	<!-- ===================================================================
		 target: init-third-party
		 
		 Description:
		 - Creates the ${build.third-party.dir}
		 - Copies and flattens ${project.lib}
		         
		 =================================================================== -->
	<target name="init-pentaho-third-party">
		<mkdir dir="${build.third-party.dir}" />

		<copy todir="${build.third-party.dir}" flatten="true" includeEmptyDirs="false" overwrite="true">
			<fileset dir="${project.lib}" includes="**/*.jar">
				<!-- exclude name="**/portal-core-lib.jar" />
				<exclude name="**/portal-portlet-lib.jar" />
				<exclude name="**/portal-security-lib.jar" / -->
			</fileset>
		</copy>
	</target>
	
	<target name="init-tomcat-libs" depends="init-pentaho-third-party">
		<!-- cglib, jaxen needed by tomcat -->
		<copy todir="${build.third-party.dir}" >
			<fileset dir="${server.dir}/server/default/lib">
				<include name="cglib.jar" />
				<include name="jaxen.jar" />
			</fileset>
		</copy>
	</target>

	<!-- ===================================================================
        target: init-pentaho-res

        Description:
        - Creates the ${build.res.dir}
        - Copies resources to ${build.res.dir}, which will have replacements
          made during the build.             
       =================================================================== -->
	<target name="init-pentaho-res">

		<mkdir dir="${build.res.dir}" />

		<!-- copy hibernate resources and such (except hsqldb) -->
		<copy todir="${build.res.dir}" overwrite="true">
			<fileset dir="${server.resource.dir}">
				<include name="**/hibernate/**" />
				<include name="**/jboss/**" />
				<include name="**/ear/**" />
			</fileset>
		</copy>

		<!-- copy the hsqldb stuff from src -->
		<copy todir="${build.res.dir}/hibernate/hsqldb" overwrite="true">
			<fileset dir="${server.src}">
				<include name="**/org/pentaho/repository/*.xml" />
				<include name="**/org/pentaho/repository/content/*.xml" />
				<include name="**/org/pentaho/repository/runtime/*.xml" />
				<include name="**/org/pentaho/util/versionchecker/pentaho/*.xml" />
				<include name="**/com/pentaho/repository/dbbased/solution/*.xml" />
				<include name="**/com/pentaho/repository/subscribe/*.xml" />
			</fileset>
		</copy>

		<!--
			Some resources that live in the source (for hsqldb) need to also
			be included with rdbms resources. So copy them, but don't overwrite
			the rdbms specific files
		-->
		<copy todir="${build.res.dir}/hibernate/mysql5">
			<fileset dir="${server.src}">
				<include name="**/org/pentaho/repository/*.xml" />
				<include name="**/org/pentaho/repository/content/*.xml" />
				<include name="**/org/pentaho/repository/runtime/*.xml" />
				<include name="**/org/pentaho/util/versionchecker/pentaho/*.xml" />
				<include name="**/com/pentaho/repository/dbbased/solution/*.xml" />
				<include name="**/com/pentaho/repository/subscribe/*.xml" />
			</fileset>
		</copy>

		<!--
			Some resources that live in the source (for hsqldb) need to also
			be included with rdbms resources. So copy them, but don't overwrite
			the rdbms specific files.
		-->
		<copy todir="${build.res.dir}/hibernate/postgresql">
			<fileset dir="${server.src}">
				<include name="**/org/pentaho/repository/*.xml" />
				<include name="**/org/pentaho/repository/content/*.xml" />
				<include name="**/org/pentaho/repository/runtime/*.xml" />
				<include name="**/org/pentaho/util/versionchecker/pentaho/*.xml" />
				<include name="**/com/pentaho/repository/dbbased/solution/*.xml" />
				<include name="**/com/pentaho/repository/subscribe/*.xml" />
			</fileset>
		</copy>
		
		<!--
			Some resources that live in the source (for hsqldb) need to also
			be included with rdbms resources. So copy them, but don't overwrite
			the rdbms specific files.
		-->
		<copy todir="${build.res.dir}/hibernate/oracle10g">
			<fileset dir="${server.src}">
				<include name="**/org/pentaho/repository/*.xml" />
				<include name="**/org/pentaho/repository/content/*.xml" />
				<include name="**/org/pentaho/repository/runtime/*.xml" />
				<include name="**/org/pentaho/util/versionchecker/pentaho/*.xml" />
				<include name="**/com/pentaho/repository/dbbased/solution/*.xml" />
				<include name="**/com/pentaho/repository/subscribe/*.xml" />
			</fileset>
		</copy>		
		
		<!-- quartz jar is different for oracle. make build.res.dir equal for all dbs, so war targets can be reused -->
		<mkdir dir="${build.res.dir}/quartz"/>
		<mkdir dir="${build.res.dir}/quartz/hsqldb"/>
		<mkdir dir="${build.res.dir}/quartz/mysql5"/>
		<mkdir dir="${build.res.dir}/quartz/oracle10g"/>
		<mkdir dir="${build.res.dir}/quartz/postgresql"/>
		
		<copy todir="${build.res.dir}/quartz/hsqldb" file="${thirdparty.lib}/lib/quartz/quartz-1.5.2.jar" />
		<copy todir="${build.res.dir}/quartz/mysql5" file="${thirdparty.lib}/lib/quartz/quartz-1.5.2.jar" />
		<copy todir="${build.res.dir}/quartz/oracle10g" file="${thirdparty.lib}/lib/quartz/quartz-oracle-1.5.2.jar" />
		<copy todir="${build.res.dir}/quartz/postgresql" file="${thirdparty.lib}/lib/quartz/quartz-1.5.2.jar" />
	</target>

	<!--
		This target modifies the pentaho-solutions/samples/metadata.xmi file by setting the
		database connection properties to be consistent with either mysql or hsql,
		depending on the "parameters" it is called with (parameters = databaseType,databaseJdbcUrl)
		This task requires the properties databaseType and databaseJdbcUrl to be set
	-->

	<target name="init-pentaho-metadata">
		<mkdir dir="${build.solutions.dir}" />
		<mkdir dir="${build.solutions.dir}/hsqldb" />
		<mkdir dir="${build.solutions.dir}/mysql5" />
		<mkdir dir="${build.solutions.dir}/oracle10g" />
		<mkdir dir="${build.solutions.dir}/postgresql" />

		<xmltask source='${solutions.dir}/samples/metadata.xmi' dest='${build.solutions.dir}/hsqldb/metadata_hsqldb.xmi'>
			<replace path='${xpath.DATABASE_JDBC_URL}' withText='HYPERSONIC' />
			<replace path='${xpath.DATABASE_TYPE}' withText='HYPERSONIC' />
		</xmltask>

		<xmltask source='${solutions.dir}/samples/metadata.xmi' dest='${build.solutions.dir}/mysql5/metadata_mysql5.xmi'>
			<replace path='${xpath.DATABASE_JDBC_URL}' withText='MYSQL' />
			<replace path='${xpath.DATABASE_TYPE}' withText='MYSQL' />
		</xmltask>
		
		<xmltask source='${solutions.dir}/samples/metadata.xmi' dest='${build.solutions.dir}/oracle10g/metadata_oracle10g.xmi'>
			<replace path='${xpath.DATABASE_JDBC_URL}' withText='ORACLE' />
			<replace path='${xpath.DATABASE_TYPE}' withText='ORACLE' />
		</xmltask>
		
		<xmltask source='${solutions.dir}/samples/metadata.xmi' dest='${build.solutions.dir}/postgresql/metadata_postgresql.xmi'>
			<replace path='${xpath.DATABASE_JDBC_URL}' withText='POSTGRESQL' />
			<replace path='${xpath.DATABASE_TYPE}' withText='POSTGRESQL' />
		</xmltask>

	</target>
	
	<!--====================================================
		target: init-tomcat-solutions
		
		Description:
		Some solution files are different for tomcat, than jboss.
		For example, tomcat does not need the portal menu items.
		
		===================================================== -->
	
	<target name="init-tomcat-solutions">
		<mkdir dir="${build.dir}/pentaho-solutions"/>
		<copy todir="${build.dir}/pentaho-solutions">
			<fileset dir="${solutions.dir}">
				<include name="system/custom/template.html"/>
				<include name="system/custom/template-home.html"/>
			</fileset>
		</copy>		
		<!--
		<replace file="${build.dir}/pentaho-solutions/system/custom/template-home.html">
		   <replacetoken><![CDATA[menu2.addItem("{portal}", "/portal/portal/pentaho/default");]]></replacetoken>
		   <replacevalue><![CDATA[]]></replacevalue>
		</replace>
		
		<replace file="${build.dir}/pentaho-solutions/system/custom/template.html">
		   <replacetoken><![CDATA[menu2.addItem("{portal}", "/portal/portal/pentaho/default");]]></replacetoken>
		   <replacevalue><![CDATA[]]></replacevalue>
		</replace>
		-->
	</target>

	<!-- =================================
          target: init-pentaho-hsqldb

          Initialize the sample hsqldb data.
          
          depends="init-pentaho-doc"
         ================================= -->
	<target name="init-pentaho-data" >

		<mkdir dir="${build.data.dir}" />

		<copy todir="${build.data.dir}/hsqldb">
			<fileset dir="${data.dir}">
				<exclude name=".project" />
				<exclude name="**/mysql5/**" />
				<exclude name="**/oracle10g/**" />
				<exclude name="**/postgresql/**" />
			</fileset>
			<!-- fileset dir="${build.doc.dir}">
				<include name="license.txt" />
			</fileset -->
		</copy>

		<copy todir="${build.data.dir}/mysql5">
			<fileset dir="${data.dir}/mysql5" />
		</copy>
		
		<copy todir="${build.data.dir}/oracle10g">
			<fileset dir="${data.dir}/oracle10g" />
		</copy>
		
		<copy todir="${build.data.dir}/postgresql">
			<fileset dir="${data.dir}/postgresql" />
		</copy>

		<!--<copy todir="${build.data.dir}/hsqldb/lib" file="${bi.platform.build.dir}/lib-runtime/hsqldb.jar" />-->

		<!-- this is needed when running tests on linux -->
		<chmod file="${start.hsqldb.path}" perm="700" />
		<chmod file="${stop.hsqldb.path}" perm="700" />
	</target>

	<!-- =================================
		  target: init-pentaho-javadoc

		  Create the build.javadoc.dir.
		 ================================= -->
	<target name="init-pentaho-javadoc">
		<mkdir dir="${build.javadoc.dir}" />
	</target>

	<!-- ===================================================================
        target: init-pentaho-doc

        Create the build.doc.dir and make replacements in the release notes
        and change log.
       =================================================================== -->
	<target name="init-pentaho-doc">
		<mkdir dir="${build.doc.dir}" />

		<copy todir="${build.doc.dir}" overwrite="true">
			<fileset dir="${license.dir}" includes="license.txt" />
		</copy>

		<copy todir="${build.starthere.dir}" overwrite="true">
			<fileset dir="${starthere.dir}" />
		</copy>

		<copy todir="${build.doc.dir}" file="${release.notes.dir}/${release.notes.file}" overwrite="true" />
		<copy todir="${build.doc.dir}" file="${release.notes.dir}/${changelog.file}" overwrite="true" />

		<replace file="${build.doc.dir}/${release.notes.file}" token="&lt;!-- release.major.number --&gt;" value="${release.major.number}" />
		<replace file="${build.doc.dir}/${release.notes.file}" token="&lt;!-- release.minor.number --&gt;" value="${release.minor.number}" />
		<replace file="${build.doc.dir}/${release.notes.file}" token="&lt;!-- release.milestone.number --&gt;" value="${release.milestone.number}" />
		<replace file="${build.doc.dir}/${release.notes.file}" token="&lt;!-- release.build.number --&gt;" value="${release.build.number}" />
		<replace file="${build.doc.dir}/${release.notes.file}" token="&lt;!-- release.candidate.token --&gt;" value="${release.candidate.token}" />
		<replace file="${build.doc.dir}/${release.notes.file}" token="&lt;!-- release.name --&gt;" value="${release.name}" />
		<replace file="${build.doc.dir}/${release.notes.file}" token="&lt;!-- release.date --&gt;" value="${current.date}" />

		<replace file="${build.doc.dir}/${changelog.file}" token="&lt;!-- release.major.number --&gt;" value="${release.major.number}" />
		<replace file="${build.doc.dir}/${changelog.file}" token="&lt;!-- release.minor.number --&gt;" value="${release.minor.number}" />
		<replace file="${build.doc.dir}/${changelog.file}" token="&lt;!-- release.milestone.number --&gt;" value="${release.milestone.number}" />
		<replace file="${build.doc.dir}/${changelog.file}" token="&lt;!-- release.build.number --&gt;" value="${release.build.number}" />
		<replace file="${build.doc.dir}/${changelog.file}" token="&lt;!-- release.candidate.token --&gt;" value="${release.candidate.token}" />
		<replace file="${build.doc.dir}/${changelog.file}" token="&lt;!-- release.name --&gt;" value="${release.name}" />
		<replace file="${build.doc.dir}/${changelog.file}" token="&lt;!-- release.date --&gt;" value="${current.date}" />

	</target>

	<!-- ======================================================================= 
          target: init-pentaho-scripts

          Description:
          - Copy scripts to the build directory and fix any end of line issues.
         ===================================================================== -->
	<target name="init-pentaho-scripts">
		<mkdir dir="${build.scripts.dir}" />
		
		<copy todir="${build.scripts.dir}">
			<fileset dir="${scripts.dir}">
				<exclude name="**/demo/**"/>
				<exclude name="**/dev/**"/>
			</fileset>
		</copy>
		
		<copy todir="${build.scripts.dir}/jboss/oracle10g">
			<fileset dir="${scripts.dir}/jboss/mysql5"/>
		</copy>
		
		<copy todir="${build.scripts.dir}/jboss/postgresql">
			<fileset dir="${scripts.dir}/jboss/mysql5"/>
		</copy>
		
		<copy todir="${build.scripts.dir}/tomcat/oracle10g">
			<fileset dir="${scripts.dir}/jboss/mysql5"/>
		</copy>
		
		<copy todir="${build.scripts.dir}/tomcat/postgresql">
			<fileset dir="${scripts.dir}/jboss/mysql5"/>
		</copy>

		<!-- fix up unix end of line chars 	-->
		<fixcrlf srcdir="${build.scripts.dir}" eol="unix" eof="remove" includes="**/*.sh" />
	</target>

	<!-- =================================
		 target: init-dist-dir

		 Create the dist dir.
		 ================================= -->
	<target name="init-dist-dir">
		<mkdir dir="${dist.dir}" />
	</target>


	<!-- ===================================================================
        target: third party lib compressed package

        Zip the third party lib directory.
       =================================================================== -->
	<target name="zip-pentaho-lib">
		<zip destfile="${dist.dir}/pentaho_lib-${release.number}.zip">
			<fileset dir="third-party" />
			<fileset dir="${build.doc.dir}" />
		</zip>
	</target>

	<!-- ===================================================================
        target: source compressed package

        Zip the src directory.
       =================================================================== -->
	<target name="zip-pentaho-src">
		<zip destfile="${dist.dir}/pentaho_src-${release.number}.zip">
			<fileset dir="${server.src}" />
		</zip>
	</target>

	<!-- ===================================================================
        target: javadoc package

        Zip the javadoc.
       =================================================================== -->
	<target name="zip-pentaho-javadoc" depends="init-pentaho-javadoc, init-pentaho-doc">
		<javadoc destdir="${build.javadoc.dir}/docs/api" source="1.5" sourcepath="server/pentaho/src" access="public" use="true" notree="false" nonavbar="false" noindex="false" splitindex="true" author="true" version="true" nodeprecatedlist="false" nodeprecated="false" packagenames="org.pentaho.*, com.pentaho.*" excludepackagenames="org.pentaho.test.*, org.hibernate.*" doctitle="Pentaho BI Platform">
			<classpath refid="classpath" />
		</javadoc>

		<zip destfile="${dist.dir}/pentaho_javadoc-${release.number}.zip">
			<fileset dir="${build.javadoc.dir}" />
			<fileset dir="${build.doc.dir}" />
		</zip>
	</target>

	<!-- =================================
          target: zip-pentaho-sample-data

          Zip the sample data.
         ================================= -->
	<target name="zip-pentaho-sample-data" depends="init-pentaho-data">
		<zip destfile="${dist.dir}/pentaho_sample_data-${release.number}.zip">
			<zipfileset dir="${build.data.dir}/hsqldb" prefix="pentaho-data">
				<exclude name=".project" />
			</zipfileset>
		</zip>
	</target>

	<!-- =================================
          target: zip-pentaho-solutions

          Zip the sample solutions.
         ================================= -->
	<target name="zip-pentaho-solutions" depends="init-dist-dir, init-pentaho-metadata">
		<zip destfile="${dist.dir}/pentaho_solutions-${release.number}.zip">
			<zipfileset dir="${solutions.dir}" prefix="pentaho-solutions">
				<exclude name=".project" />
				<exclude name="**/samples/metadata.xmi" />
			</zipfileset>
			<zipfileset dir="${build.solutions.dir}/hsqldb" prefix="pentaho-solutions/samples">
				<include name="metadata_hsqldb.xmi" />
			</zipfileset>
			<zipfileset dir="${build.solutions.dir}/mysql5" prefix="pentaho-solutions/samples">
				<include name="metadata_mysql5.xmi" />
			</zipfileset>
			<!-- zipfileset dir="${build.doc.dir}" prefix="pentaho-solutions" / -->
		</zip>
	</target>

	<!-- ====================================================
          target: zip-all-pentaho-jboss-pcis

          Macro target for building all pentaho jboss pcis.
         ===================================================== -->
	<target name="zip-all-pentaho-jboss-pcis" depends="zip-pentaho-jboss-hsqldb-pci, zip-pentaho-jboss-mysql5-pci, tar-pentaho-jboss-hsqldb-pci, tar-pentaho-jboss-mysql5-pci, zip-pentaho-jboss-oracle10g-pci, zip-pentaho-jboss-postgresql-pci" />

	<!-- ============================================================
          target: zip-pentaho-jboss-hsqldb-pci

          Create a pentaho pci configured for jboss and hsqldb.
         ========================================================= -->
	<target name="zip-pentaho-jboss-hsqldb-pci" depends="init-dist-dir, init-pentaho-metadata, init-pentaho-data, init-pentaho-doc, init-pentaho-scripts">
		<antcall target="zip-pentaho-jboss">
			<param name="rdbms" value="hsqldb" />
		</antcall>
	</target>

	<!-- ==============================================================
          target: tar-pentaho-jboss-hsqldb-pci

          Create a pentaho pci configured for jboss and hsqldb.
         ============================================================ -->
	<target name="tar-pentaho-jboss-hsqldb-pci" depends="init-dist-dir, init-pentaho-metadata, init-pentaho-data, init-pentaho-doc, init-pentaho-scripts">
		<antcall target="tar-gz-pentaho-jboss">
			<param name="rdbms" value="hsqldb" />
		</antcall>
	</target>

	<!-- ========================================================
		  target: zip-pentaho-jboss-rdms-pci

		  Create a pentaho pci configured for jboss and mysql.
		 ======================================================= -->
	<target name="zip-pentaho-jboss-mysql5-pci" depends="init-dist-dir, init-pentaho-metadata, init-pentaho-data, init-pentaho-doc, init-pentaho-scripts">
		<antcall target="zip-pentaho-jboss">
			<param name="rdbms" value="mysql5" />
		</antcall>
	</target>

	<!-- =======================================================
		  target: tar-pentaho-jboss-rdms-pci

		  Create a pentaho pci configured for jboss and mysql.
		 ======================================================== -->
	<target name="tar-pentaho-jboss-mysql5-pci" depends="init-dist-dir, init-pentaho-metadata, init-pentaho-data, init-pentaho-doc, init-pentaho-scripts">
		<antcall target="tar-gz-pentaho-jboss">
			<param name="rdbms" value="mysql5" />
		</antcall>
	</target>
	
	<!-- ========================================================
		  target: zip-pentaho-jboss-rdms-pci

		  Create a pentaho pci configured for jboss and oracle.
		 ======================================================= -->
	<target name="zip-pentaho-jboss-oracle10g-pci" depends="init-dist-dir, init-pentaho-metadata, init-pentaho-data, init-pentaho-doc, init-pentaho-scripts">
		<antcall target="zip-pentaho-jboss">
			<param name="rdbms" value="oracle10g" />
		</antcall>
	</target>

	<!-- =======================================================
		  target: tar-pentaho-jboss-rdms-pci

		  Create a pentaho pci configured for jboss and oracle.
		 ======================================================== -->
	<target name="tar-pentaho-jboss-oracle10g-pci" depends="init-dist-dir, init-pentaho-metadata, init-pentaho-data, init-pentaho-doc, init-pentaho-scripts">
		<antcall target="tar-gz-pentaho-jboss">
			<param name="rdbms" value="oracle10g" />
		</antcall>
	</target>
	
	<!-- ========================================================
		  target: zip-pentaho-jboss-rdms-pci

		  Create a pentaho pci configured for jboss and postgresql.
		 ======================================================= -->
	<target name="zip-pentaho-jboss-postgresql-pci" depends="init-dist-dir, init-pentaho-metadata, init-pentaho-data, init-pentaho-doc, init-pentaho-scripts">
		<antcall target="zip-pentaho-jboss">
			<param name="rdbms" value="postgresql" />
		</antcall>
	</target>

	<!-- =======================================================
		  target: tar-pentaho-jboss-rdms-pci

		  Create a pentaho pci configured for jboss and postgresql.
		 ======================================================== -->
	<target name="tar-pentaho-jboss-postgresql-pci" depends="init-dist-dir, init-pentaho-metadata, init-pentaho-data, init-pentaho-doc, init-pentaho-scripts">
		<antcall target="tar-gz-pentaho-jboss">
			<param name="rdbms" value="postgresql" />
		</antcall>
	</target>

	<!-- =========================================================================
          target: zip-pentaho-jboss-hsqldb

          This is the standard pentaho pci, which uses hsqldb as its rdbms.

          This is a reusable target. Current targets that use this target:
          - zip-pentaho-jboss-hsqldb-pci

          Parameters:
          rdbms - available values are hsqldb

         ===================================================================== -->
	<target name="zip-pentaho-jboss">
		<zip destfile="${dist.dir}/pentaho_demo_${rdbms}-${release.number}.zip">
			<!-- include third-party licenses -->
			<zipfileset dir="${thirdparty.lib}/licenses" prefix="pentaho-biserver/licenses" />
			<!-- include jboss -->
			<zipfileset dir="${server.dir}" prefix="pentaho-biserver/jboss" />
			<!-- include the pentaho sample data -->
			<zipfileset dir="${build.data.dir}/${rdbms}" prefix="pentaho-biserver/data">
				<!-- exclude name="**/mysql5/**"/ -->
			</zipfileset>
			<!-- include all of the pentaho wars -->
			<zipfileset dir="${build.wars.dir}/jboss/portal/${rdbms}/expanded/pentaho.war" prefix="pentaho-biserver/jboss/server/default/deploy/pentaho.war" />
			<zipfileset dir="${server.resource.dir}/styles/pentaho-style.war" prefix="pentaho-biserver/jboss/server/default/deploy/pentaho-style.war" />
			<zipfileset dir="${server.resource.dir}/styles/sw-style.war" prefix="pentaho-biserver/jboss/server/default/deploy/sw-style.war" />
			<zipfileset dir="${server.resource.dir}/jboss/pentaho-portal-layout.war" prefix="pentaho-biserver/jboss/server/default/deploy/pentaho-portal-layout.war">
				<exclude name="**/WEB-INF/web.xml" />
			</zipfileset>
			<zipfileset dir="${build.precompiled.dir}/pentaho-portal-layout.war" prefix="pentaho-biserver/jboss/server/default/deploy/pentaho-portal-layout.war" />
			<!-- include the pentaho sample solutions -->
			<zipfileset dir="${solutions.dir}" prefix="pentaho-biserver/pentaho-solutions">
				<exclude name=".dummy" />
				<exclude name=".project" />
				<!-- exclude this. The build has modified it. Grab it from /build/pentaho-solutions -->
				<exclude name="**/samples/metadata.xmi" />
			</zipfileset>
			<!-- grab the modified metadata.xmi -->
			<zipfileset dir="${build.solutions.dir}/${rdbms}" fullpath="pentaho-biserver/pentaho-solutions/samples/metadata.xmi">
				<include name="metadata_${rdbms}.xmi" />
			</zipfileset>
			<zipfileset dir="${build.scripts.dir}/jboss/${rdbms}" prefix="pentaho-biserver" />
			<zipfileset dir="${build.res.dir}/jboss/datasources/${rdbms}" prefix="pentaho-biserver/jboss/server/default/deploy" />
			<zipfileset dir="${jre.dir}" prefix="pentaho-biserver/jre" />
			<zipfileset dir="${build.doc.dir}" prefix="pentaho-biserver" />
		</zip>
	</target>

	<!-- =========================================================================
          target: tar-gz-pentaho-jboss-hsqldb

          Tar-gz the pentaho pci for hsqldb.

          This is a reusable target. Current targets that use this target:
          - tar-pentaho-jboss-hsqldb-pci
         ========================================================================== -->
	<target name="tar-gz-pentaho-jboss">
		<tar destfile="${dist.dir}/pentaho_demo_${rdbms}-${release.number}.tar" longfile="gnu">
			<!-- include third-party licenses -->
			<tarfileset dir="${thirdparty.lib}/licenses" prefix="pentaho-biserver/licenses" />
			<tarfileset dir="${server.dir}" prefix="pentaho-biserver/jboss" mode="755">
			</tarfileset>
			<!-- tarfileset dir="${build.data.dir}/${rdbms}" prefix="pentaho-biserver/data" excludes="**/*.sh, **/*.bat"/ -->
			<tarfileset dir="${build.data.dir}/${rdbms}" prefix="pentaho-biserver/data" mode="755">
				<!-- exclude name="**/mysql5/**"/ -->
			</tarfileset>

			<tarfileset dir="${build.wars.dir}/jboss/portal/${rdbms}/expanded/pentaho.war" prefix="pentaho-biserver/jboss/server/default/deploy/pentaho.war" />
			<tarfileset dir="${server.resource.dir}/styles/pentaho-style.war" prefix="pentaho-biserver/jboss/server/default/deploy/pentaho-style.war" />
			<tarfileset dir="${server.resource.dir}/styles/sw-style.war" prefix="pentaho-biserver/jboss/server/default/deploy/sw-style.war" />
			<tarfileset dir="${server.resource.dir}/jboss/pentaho-portal-layout.war" prefix="pentaho-biserver/jboss/server/default/deploy/pentaho-portal-layout.war">
				<exclude name="**/WEB-INF/web.xml" />
			</tarfileset>
			<tarfileset dir="${build.precompiled.dir}/pentaho-portal-layout.war" prefix="pentaho-biserver/jboss/server/default/deploy/pentaho-portal-layout.war" />
			<tarfileset dir="${solutions.dir}" prefix="pentaho-biserver/pentaho-solutions">
				<exclude name=".dummy" />
				<exclude name=".project" />
				<!-- exclude this. The build has modified it. Grab it from /build/pentaho-solutions -->
				<exclude name="**/samples/metadata.xmi" />
			</tarfileset>
			<!-- grab the modified metadata.xmi -->
			<tarfileset dir="${build.solutions.dir}/${rdbms}" fullpath="pentaho-biserver/pentaho-solutions/samples/metadata.xmi">
				<include name="metadata_${rdbms}.xmi" />
			</tarfileset>
			<tarfileset dir="${build.scripts.dir}/jboss/${rdbms}" prefix="pentaho-biserver" mode="755" includes="**/*.sh" />
			<tarfileset dir="${build.res.dir}/jboss/datasources/${rdbms}" prefix="pentaho-biserver/jboss/server/default/deploy" />
			<tarfileset dir="${build.doc.dir}" prefix="pentaho-biserver" />
		</tar>

		<gzip destfile="${dist.dir}/pentaho_demo_${rdbms}-${release.number}.tar.gz" src="${dist.dir}/pentaho_demo_${rdbms}-${release.number}.tar" />

		<!-- remove the tar -->
		<delete file="${dist.dir}/pentaho_demo_${rdbms}-${release.number}.tar" />
	</target>

	<!-- =========================================================================
		   target: zip-all-pentaho-tomcat-pcis

		   This is a placeholder for future tomcat pcis. Currently, we do not package
		   any tomcat pcis, but we do package web application archives for tomcat.
		 ======================================================================== -->
	<target name="zip-all-pentaho-tomcat-pcis" depends="zip-pentaho-tomcat-hsqldb-pci, zip-pentaho-tomcat-mysql5-pci, tar-pentaho-tomcat-hsqldb-pci, tar-pentaho-tomcat-mysql5-pci, zip-pentaho-tomcat-oracle10g-pci, tar-pentaho-tomcat-oracle10g-pci, zip-pentaho-tomcat-postgresql-pci, tar-pentaho-tomcat-postgresql-pci" />
	
	<!-- ============================================================
          target: zip-pentaho-tomcat-hsqldb-pci

          Create a pentaho pci configured for jboss and hsqldb.
          init-pentaho-doc, init-pentaho-scripts
         ========================================================= -->
	<target name="zip-pentaho-tomcat-hsqldb-pci" depends="init-dist-dir, init-pentaho-metadata, init-pentaho-data">
		<antcall target="zip-pentaho-tomcat">
			<param name="rdbms" value="hsqldb" />
			<param name="appserver.dir" value="${tomcat.dir}" />
		</antcall>
	</target>

	<!-- ==============================================================
          target: tar-pentaho-jboss-hsqldb-pci

          Create a pentaho pci configured for tomcat and hsqldb.
         ============================================================ -->
	<target name="tar-pentaho-tomcat-hsqldb-pci" depends="init-dist-dir, init-tomcat-solutions, init-pentaho-metadata, init-pentaho-data, init-pentaho-doc, init-pentaho-scripts">
		<antcall target="tar-gz-pentaho-tomcat">
			<param name="rdbms" value="hsqldb" />
			<param name="appserver.dir" value="${tomcat.dir}" />
		</antcall>
	</target>

	<!-- ========================================================
		  target: zip-pentaho-tomcat-rdms-pci

		  Create a pentaho pci configured for tomcat and mysql.
		 ======================================================= -->
	<target name="zip-pentaho-tomcat-mysql5-pci" depends="init-dist-dir, init-tomcat-solutions, init-pentaho-metadata, init-pentaho-data, init-pentaho-doc, init-pentaho-scripts">
		<antcall target="zip-pentaho-tomcat">
			<param name="rdbms" value="mysql5" />
			<param name="appserver.dir" value="${tomcat.dir}" />
		</antcall>
	</target>

	<!-- =======================================================
		  target: tar-pentaho-tomcat-rdms-pci

		  Create a pentaho pci configured for tomcat and mysql.
		 ======================================================== -->
	<target name="tar-pentaho-tomcat-mysql5-pci" depends="init-dist-dir, init-tomcat-solutions, init-pentaho-metadata, init-pentaho-data, init-pentaho-doc, init-pentaho-scripts">
		<antcall target="tar-gz-pentaho-tomcat">
			<param name="rdbms" value="mysql5" />
			<param name="appserver.dir" value="${tomcat.dir}" />
		</antcall>
	</target>
	
	<!-- ========================================================
		  target: zip-pentaho-tomcat-rdms-pci

		  Create a pentaho pci configured for tomcat and oracle.
		 ======================================================= -->
	<target name="zip-pentaho-tomcat-oracle10g-pci" depends="init-dist-dir, init-tomcat-solutions, init-pentaho-metadata, init-pentaho-data, init-pentaho-doc, init-pentaho-scripts">
		<antcall target="zip-pentaho-tomcat">
			<param name="rdbms" value="oracle10g" />
			<param name="appserver.dir" value="${tomcat.dir}" />
		</antcall>
	</target>

	<!-- =======================================================
		  target: tar-pentaho-tomcat-rdms-pci

		  Create a pentaho pci configured for tomcat and oracle.
		 ======================================================== -->
	<target name="tar-pentaho-tomcat-oracle10g-pci" depends="init-dist-dir, init-tomcat-solutions, init-pentaho-metadata, init-pentaho-data, init-pentaho-doc, init-pentaho-scripts">
		<antcall target="tar-gz-pentaho-tomcat">
			<param name="rdbms" value="oracle10g" />
			<param name="appserver.dir" value="${tomcat.dir}" />
		</antcall>
	</target>
	
	<!-- ========================================================
		  target: zip-pentaho-tomcat-rdms-pci

		  Create a pentaho pci configured for tomcat and postgresql.
		 ======================================================= -->
	<target name="zip-pentaho-tomcat-postgresql-pci" depends="init-dist-dir, init-tomcat-solutions, init-pentaho-metadata, init-pentaho-data, init-pentaho-doc, init-pentaho-scripts">
		<antcall target="zip-pentaho-tomcat">
			<param name="rdbms" value="postgresql" />
			<param name="appserver.dir" value="${tomcat.dir}" />
		</antcall>
	</target>

	<!-- =======================================================
		  target: tar-pentaho-tomcat-rdms-pci

		  Create a pentaho pci configured for tomcat and postgresql.
		 ======================================================== -->
	<target name="tar-pentaho-tomcat-postgresql-pci" depends="init-dist-dir, init-tomcat-solutions, init-pentaho-metadata, init-pentaho-data, init-pentaho-doc, init-pentaho-scripts">
		<antcall target="tar-gz-pentaho-tomcat">
			<param name="rdbms" value="postgresql" />
			<param name="appserver.dir" value="${tomcat.dir}" />
		</antcall>
	</target>
	
	<target name="zip-pentaho-tomcat">
		<zip destfile="${build.dir}/pentaho_biserver_tomcat_${rdbms}-${release.number}.zip">
			<!-- include third-party licenses -->
			<!-- zipfileset dir="${thirdparty.lib}/licenses" prefix="pentaho-biserver/licenses" / -->
			<!-- include tomcat -->
			<zipfileset dir="${appserver.dir}" prefix="pentaho-biserver/tomcat"/>
			<!-- include the pentaho sample data -->
			<zipfileset dir="${build.data.dir}/${rdbms}" prefix="pentaho-biserver/data" />
			<!-- include all of the pentaho wars -->
			<zipfileset dir="${build.wars.dir}/tomcat/${rdbms}/" prefix="pentaho-biserver/tomcat/webapps">
				<include name="pentaho.war"/>
			</zipfileset>
			<zipfileset dir="${build.wars.dir}" prefix="pentaho-biserver/tomcat/webapps">
				<include name="tomcat/${rdbms}/pentaho.war"/>
				<include name="sw-style.war"/>
				<include name="pentaho-style.war"/>
			</zipfileset>
			<!-- include the pentaho sample solutions -->
			<zipfileset dir="${solutions.dir}" prefix="pentaho-biserver/pentaho-solutions">
				<exclude name=".dummy" />
				<exclude name=".project" />
				<!-- exclude this. The build has modified it. Grab it from /build/pentaho-solutions -->
				<exclude name="**/samples/metadata.xmi" />
			</zipfileset>
			<!-- grab the modified metadata.xmi -->
			<zipfileset dir="${build.solutions.dir}/${rdbms}" fullpath="pentaho-biserver/pentaho-solutions/samples/metadata.xmi">
				<include name="metadata_${rdbms}.xmi" />
			</zipfileset>
			<!-- include the start scripts -->
			<zipfileset dir="./scripts/tomcat/${rdbms}" prefix="pentaho-biserver" excludes="**/*.sh" />
			<zipfileset dir="${jre.dir}" prefix="pentaho-biserver/jre" />
			<!-- zipfileset dir="${build.doc.dir}" prefix="pentaho-biserver" / -->
		</zip>
	</target>
	
	<!-- =========================================================================
          target: tar-gz-pentaho-tomcat

          Tar-gz the pentaho pci for tomcat.

         ========================================================================== -->
	<target name="tar-gz-pentaho-tomcat">
		<tar destfile="${dist.dir}/pentaho_tomcat_${rdbms}-${release.number}.tar" longfile="gnu">
			<!-- include third-party licenses -->
			<tarfileset dir="${thirdparty.lib}/licenses" prefix="pentaho-biserver/licenses" />
			<!-- include tomcat -->
			<tarfileset dir="${appserver.dir}" prefix="pentaho-biserver/tomcat" mode="755">
				<!-- exclude server.xml. Include the one with updated datasources for specific rdbms -->
				<exclude name="**/conf/server.xml"/>
			</tarfileset>
			<!-- include the updated server.xml -->
			<tarfileset file="${server.resource.dir}/tomcat/${rdbms}/server.xml" fullpath="pentaho-biserver/tomcat/conf/server.xml" />
			<!-- include the pentaho sample data -->
			<tarfileset dir="${build.data.dir}/${rdbms}" prefix="pentaho-biserver/data" mode="755"/>
			<!-- include all of the pentaho wars -->
			<tarfileset dir="${build.wars.dir}/tomcat/${rdbms}/expanded/pentaho.war" prefix="pentaho-biserver/tomcat/webapps/pentaho" />
			<tarfileset dir="${server.resource.dir}/styles/pentaho-style.war" prefix="pentaho-biserver/tomcat/webapps/pentaho-style" />
			<tarfileset dir="${server.resource.dir}/styles/sw-style.war" prefix="pentaho-biserver/tomcat/webapps/sw-style" />
			<!-- include the pentaho sample solutions -->
			<tarfileset dir="${solutions.dir}" prefix="pentaho-biserver/pentaho-solutions">
				<exclude name=".dummy" />
				<exclude name=".project" />
				<!-- exclude this. portal menu is removed for tomcat -->
				<exclude name="**/template-home.html"/> 
				<exclude name="**/template.html"/> 
				<!-- exclude this. The build has modified it. Grab it from /build/pentaho-solutions -->
				<exclude name="**/samples/metadata.xmi" />
			</tarfileset>
			<!-- include the new tomcat template-home.html and template.html -->
			<tarfileset dir="${build.dir}/pentaho-solutions" prefix="pentaho-biserver/pentaho-solutions">
				<include name="**/system/**"/>
			</tarfileset>
			<!-- grab the modified metadata.xmi -->
			<tarfileset dir="${build.solutions.dir}/${rdbms}" fullpath="pentaho-biserver/pentaho-solutions/samples/metadata.xmi">
				<include name="metadata_${rdbms}.xmi" />
			</tarfileset>
			<tarfileset dir="${build.scripts.dir}/tomcat/${rdbms}" prefix="pentaho-biserver" mode="755" excludes="**/*.bat"  />
			<tarfileset dir="${build.doc.dir}" prefix="pentaho-biserver" />
		</tar>

		<gzip destfile="${dist.dir}/pentaho_tomcat_${rdbms}-${release.number}.tar.gz" src="${dist.dir}/pentaho_tomcat_${rdbms}-${release.number}.tar" />

		<!-- remove the tar -->
		<delete file="${dist.dir}/pentaho_tomcat_${rdbms}-${release.number}.tar" />
	</target>

	<!-- ======================================================================
          target: zip-pentaho-deployments

          Zip the j2ee deployments package, which contains all files necessary
          to build application archives for jboss and tomcat. If you download the
          source, you do not need this package. Simply run the targets that are
          already in this file to build pentaho application archives.
         ===================================================================== -->
	<target name="zip-pentaho-j2ee-deployments" depends="init-pentaho-third-party, init-pentaho-res, init-pentaho-doc">
		<mkdir dir="${dist.dir}" />
		<zip destfile="${dist.dir}/pentaho_j2ee_deployments-${release.number}.zip">
			<!-- include third-party licenses -->
			<zipfileset dir="${thirdparty.lib}/licenses" prefix="pentaho_j2ee_deployments/pentaho-third-party/licenses" />
			<zipfileset dir="${build.third-party.dir}" prefix="pentaho_j2ee_deployments/pentaho-third-party" />
			<!-- cglib, jaxen needed by tomcat -->
			<zipfileset dir="${server.dir}/server/default/lib" prefix="pentaho_j2ee_deployments/pentaho-third-party">
				<include name="cglib.jar" />
				<include name="jaxen.jar" />
			</zipfileset>
			<!-- cacheException.class needed for jboss no-portal -->
			<!-- zipfileset dir="${server.dir}/server/default/deploy/jboss-portal.sar/lib" prefix="pentaho_j2ee_deployments/pentaho-third-party">
				<include name="ehcache.jar" />
			</zipfileset -->
			<zipfileset dir="${build.jars.dir}" prefix="pentaho_j2ee_deployments/pentaho-jars" />
			<zipfileset dir="${build.classes.dir}" prefix="pentaho_j2ee_deployments/pentaho-classes" excludes="**/*.class">
				<include name="**/locale/**" />
			</zipfileset>
			<zipfileset dir="${build.precompiled.dir}" prefix="pentaho_j2ee_deployments/pentaho-precompiled-jsps" />
			<zipfileset dir="${build.doc.dir}" prefix="pentaho_j2ee_deployments/pentaho-doc" />
			<zipfileset dir="${webapp.dir}" prefix="pentaho_j2ee_deployments/pentaho-webapp" />
			<!-- make sure to include the files that have replacements -->
			<zipfileset dir="${build.res.dir}" prefix="pentaho_j2ee_deployments/pentaho-res" />
			<!-- include the rest of the resources -->
			<zipfileset dir="${server.resource.dir}" prefix="pentaho_j2ee_deployments/pentaho-res">
				<exclude name="**/ear/**" />
				<exclude name="**/hibernate/**" />
				<exclude name="**/jboss/**" />
			</zipfileset>

			<zipfileset dir="." includes="deployment_build.properties" fullpath="pentaho_j2ee_deployments/override.properties" />
			<zipfileset dir="." includes="deployment_build.xml" fullpath="pentaho_j2ee_deployments/build.xml" />
			<zipfileset dir="${server.src}/build-res" includes="version.properties" prefix="pentaho_j2ee_deployments" />
			<zipfileset dir="." includes="excludejars.*, excludejars-noportal.jboss, build.properties" prefix="pentaho_j2ee_deployments" />
		</zip>
	</target>
	
</project>