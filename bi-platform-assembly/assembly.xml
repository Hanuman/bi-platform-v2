<project name="Open Platform Assembly" basedir="." default="" xmlns:ivy="antlib:org.apache.ivy.ant">

  <tstamp>
    <format property="current.date" pattern="MM-dd-yyyy" locale="en" />
  </tstamp>
	
	<!-- Define xmltask for xml file manipulation -->
	<taskdef name="xmltask" classname="com.oopsconsultancy.xmltask.ant.XmlTask">
				<classpath>
					<fileset dir="${user.home}/.pentaho_build_cache/xmlTask">
						<include name="*.jar" />
					</fileset>
				</classpath>
	</taskdef>
  
  <!-- Load the properties files in the proper order -->
  <property file="assembly.properties"
            description="Properties customized for your particular project belong in this file." />

  <!-- =================================================================================
	     Property Defaults
	     Any of these properties can be overridden in either build.properties or override.properties
	     =================================================================================-->

  
	<!-- Assembly properties -->
		<property name="lib.dir" value="${basedir}/lib" description="Directory that hosts Jar files required to compile project source.  (IVY will populate this directory with required jars)" />  
		<property name="stage.dir" value="${basedir}/stage" description="Staging dir for pentaho war" />
		<property name="stage.dir.server" value="${basedir}/stage/win-bi-server" />
		<property name="web.dir" value="${stage.dir.server}/WEB-INF" />
	  <property name="web.classes.dir" value="${web.dir}/classes" />
	  <property name="web.lib.dir" value="${web.dir}/lib" />
	  <property name="meta.dir" value="${stage.dir.server}/META-INF" />
		<property name="container.stage.dir" value="${stage.dir.server}/tomcat"/>
		<property name="container.deploy.dir" value="${stage.dir.server}/tomcat/webapps"/>
	  <property name="hibernate.hbm.dir" value="../bi-platform-repository/res/hibernate" />
	  <property name="bi.platform.appserver.dir" value="../bi-platform-appserver" />
	  <property name="dist.dir" value="${basedir}/dist" />
	
  <!-- project relative folder for jar files for xmltask external ant task -->
  
  <!-- ========================================================================
	target: Clean-all / Clean-stage / Clean-dist / Clean-lib
	
	Please define conditions and other top-level elements at this level. What is 
	a top-level element? To find out, use Eclipse's Outline mode and switch the 
	Show/Hide Top Level Elements button. 
	======================================================================= -->

  <!-- Clean Targets -->
  <target name="clean-stage">
    <delete dir="${stage.dir}" />
  </target>

  <target name="clean-dist">
    <delete dir="${dist.dir}" />
  </target>

  <target name="clean-lib">
    <delete dir="${lib.dir}" />
  </target>

  <target name="clean-all" depends="clean-stage,clean-dist,clean-lib" />
  
  <!-- - - - - - - - - - - - - - - - - - 
      private target: init.stage.pentaho                      
     - - - - - - - - - - - - - - - - - -->
  <!-- ===================================================================
      target: init-all
      
      If you create an initialization target, please add the target to 
      the depends attribute.            
     =================================================================== -->
  <target name="init-all"
          depends="pentaho.doc.init,
    			pentaho.javadoc.init,
    			pentaho.res.init,
    			pentaho.third.party.init,
    			pentaho.metadata.init" />
  
  <target name="init.stage.pentaho">
  	<mkdir dir="lib"/>
    <mkdir dir="${stage.dir.server}/lib"/>
  	<mkdir dir="${stage.dir.server}/tomcat"/>
  	<mkdir dir="${stage.dir.server}/jre"/>
  </target>

  <!-- ================================= 
      target: stage-pentaho              
     ================================= -->
  <target name="stage-pentaho" depends="init.stage.pentaho" description="description">
	   <copy todir="${stage.dir.server}/tomcat"><fileset dir="${tomcat.dir}"></fileset></copy>
	   <copy todir="${stage.dir.server}/jre"><fileset dir="${jre.dir}"></fileset></copy>	   
     <copy todir="${stage.dir.server}/lib"><fileset dir="${lib.dir}"><include name="*.jar"/></fileset></copy>

    <manifest file="${meta.dir}/MANIFEST.MF">
      <attribute name="Implementation-Title" value="${impl.title}" />
      <attribute name="Implementation-Version" value="${impl.version}" />
      <attribute name="Implementation-Vendor" value="${impl.vendor}" />
    </manifest>

    <copy todir="${win.dir}">
      <fileset dir="${bi.platform.appserver.dir}/webapps/pentaho">
        <!-- TODO: the files we include depends on the app server, these are for Tomcat only -->
        <exclude name="**/WEB-INF/default-object.xml" />
        <exclude name="**/WEB-INF/jboss-app.xml" />
        <exclude name="**/WEB-INF/jboss-portlet.xml" />
        <exclude name="**/WEB-INF/jboss-web.xml" />
        <exclude name="**/WEB-INF/portlet-instances.xml" />
      </fileset>
    </copy>      	
  </target>

  <target name="dist.init">
    <mkdir dir="${dist.dir}" />
  </target>
	
	<target name="assemble.styles" depends="war-pentaho-style,war-sw-style" />

	<target name="assemble" depends="assemble.styles,war-pentaho" />

  <target name="war-pentaho" depends="stage-pentaho,dist.init">
    <zip destfile="${dist.dir}/pentaho-${impl.version}.war" basedir="${stage.dir}" />
  </target>

  <target name="war-pentaho-style" depends="dist.init">
    <zip destfile="${dist.dir}/pentaho-style.war">
      <zipfileset dir="${bi.platform.appserver.dir}/webapps/pentaho-style" />
    </zip>
  </target>

  <target name="war-sw-style" depends="dist.init">
    <zip destfile="${dist.dir}/sw-style.war">
      <zipfileset dir="${bi.platform.appserver.dir}/webapps/sw-style" />
    </zip>
  </target>

  <!-- ===================================================================
		 target: init-third-party
		 
		 Description:
		 - Creates the ${build.third-party.dir}
		 - Copies and flattens ${project.lib}
		         
		 =================================================================== -->
  <target name="pentaho.third.party.init">
    <mkdir dir="${build.third-party.dir}" />

    <copy todir="${build.third-party.dir}" flatten="true" includeEmptyDirs="false" overwrite="true">
      <fileset dir="${project.lib}" includes="**/*.jar">
        <!-- exclude name="**/portal-core-lib.jar" />
				<exclude name="**/portal-portlet-lib.jar" />
				<exclude name="**/portal-security-lib.jar" / -->
      </fileset>
    </copy>
  </target>

  <target name="tomcat.libs.init" depends="pentaho.third.party.init">
    <!-- cglib, jaxen needed by tomcat -->
    <copy todir="${build.third-party.dir}">
      <fileset dir="${server.dir}/server/default/lib">
        <include name="cglib.jar" />
        <include name="jaxen.jar" />
      </fileset>
    </copy>
  </target>

  <!-- ===================================================================
      target: init-pentaho-res

      Description:
      - Creates the ${build.res.dir}
      - Copies resources to ${build.res.dir}, which will have replacements
        made during the build.             
     =================================================================== -->
  <target name="pentaho.res.init">

    <mkdir dir="${build.res.dir}" />

    <!-- copy hibernate resources and such (except hsqldb) -->
    <copy todir="${build.res.dir}" overwrite="true">
      <fileset dir="${server.resource.dir}">
        <include name="**/hibernate/**" />
        <include name="**/jboss/**" />
        <include name="**/ear/**" />
      </fileset>
    </copy>

    <!-- copy the hsqldb stuff from src -->
    <copy todir="${build.res.dir}/hibernate/hsqldb" overwrite="true">
      <fileset dir="${server.src}">
        <include name="**/org/pentaho/repository/*.xml" />
        <include name="**/org/pentaho/repository/content/*.xml" />
        <include name="**/org/pentaho/repository/runtime/*.xml" />
        <include name="**/org/pentaho/util/versionchecker/pentaho/*.xml" />
        <include name="**/com/pentaho/repository/dbbased/solution/*.xml" />
        <include name="**/com/pentaho/repository/subscribe/*.xml" />
      </fileset>
    </copy>

    <!--
			Some resources that live in the source (for hsqldb) need to also
			be included with rdbms resources. So copy them, but don't overwrite
			the rdbms specific files
		-->
    <copy todir="${build.res.dir}/hibernate/mysql5">
      <fileset dir="${server.src}">
        <include name="**/org/pentaho/repository/*.xml" />
        <include name="**/org/pentaho/repository/content/*.xml" />
        <include name="**/org/pentaho/repository/runtime/*.xml" />
        <include name="**/org/pentaho/util/versionchecker/pentaho/*.xml" />
        <include name="**/com/pentaho/repository/dbbased/solution/*.xml" />
        <include name="**/com/pentaho/repository/subscribe/*.xml" />
      </fileset>
    </copy>

    <!--
			Some resources that live in the source (for hsqldb) need to also
			be included with rdbms resources. So copy them, but don't overwrite
			the rdbms specific files.
		-->
    <copy todir="${build.res.dir}/hibernate/postgresql">
      <fileset dir="${server.src}">
        <include name="**/org/pentaho/repository/*.xml" />
        <include name="**/org/pentaho/repository/content/*.xml" />
        <include name="**/org/pentaho/repository/runtime/*.xml" />
        <include name="**/org/pentaho/util/versionchecker/pentaho/*.xml" />
        <include name="**/com/pentaho/repository/dbbased/solution/*.xml" />
        <include name="**/com/pentaho/repository/subscribe/*.xml" />
      </fileset>
    </copy>

    <!--
			Some resources that live in the source (for hsqldb) need to also
			be included with rdbms resources. So copy them, but don't overwrite
			the rdbms specific files.
		-->
    <copy todir="${build.res.dir}/hibernate/oracle10g">
      <fileset dir="${server.src}">
        <include name="**/org/pentaho/repository/*.xml" />
        <include name="**/org/pentaho/repository/content/*.xml" />
        <include name="**/org/pentaho/repository/runtime/*.xml" />
        <include name="**/org/pentaho/util/versionchecker/pentaho/*.xml" />
        <include name="**/com/pentaho/repository/dbbased/solution/*.xml" />
        <include name="**/com/pentaho/repository/subscribe/*.xml" />
      </fileset>
    </copy>

    <!-- quartz jar is different for oracle. make build.res.dir equal for all dbs, so war targets can be reused -->
    <mkdir dir="${build.res.dir}/quartz" />
    <mkdir dir="${build.res.dir}/quartz/hsqldb" />
    <mkdir dir="${build.res.dir}/quartz/mysql5" />
    <mkdir dir="${build.res.dir}/quartz/oracle10g" />
    <mkdir dir="${build.res.dir}/quartz/postgresql" />

    <copy todir="${build.res.dir}/quartz/hsqldb" file="${thirdparty.lib}/lib/quartz/quartz-1.5.2.jar" />
    <copy todir="${build.res.dir}/quartz/mysql5" file="${thirdparty.lib}/lib/quartz/quartz-1.5.2.jar" />
    <copy todir="${build.res.dir}/quartz/oracle10g" file="${thirdparty.lib}/lib/quartz/quartz-oracle-1.5.2.jar" />
    <copy todir="${build.res.dir}/quartz/postgresql" file="${thirdparty.lib}/lib/quartz/quartz-1.5.2.jar" />
  </target>

  <!--================================================================================
		This target modifies the pentaho-solutions/samples/metadata.xmi file by setting the
		database connection properties to be consistent with either mysql or hsql,
		depending on the "parameters" it is called with (parameters = databaseType,databaseJdbcUrl)
		This task requires the properties databaseType and databaseJdbcUrl to be set
	  ==================================================================================-->

  <target name="pentaho.metadata.init">
    <mkdir dir="${build.solutions.dir}" />
    <mkdir dir="${build.solutions.dir}/hsqldb" />
    <mkdir dir="${build.solutions.dir}/mysql5" />
    <mkdir dir="${build.solutions.dir}/oracle10g" />
    <mkdir dir="${build.solutions.dir}/postgresql" />

    <xmltask source='${solutions.dir}/samples/metadata.xmi' dest='${build.solutions.dir}/hsqldb/metadata_hsqldb.xmi'>
      <replace path='${xpath.DATABASE_JDBC_URL}' withText='HYPERSONIC' />
      <replace path='${xpath.DATABASE_TYPE}' withText='HYPERSONIC' />
    </xmltask>

    <xmltask source='${solutions.dir}/samples/metadata.xmi' dest='${build.solutions.dir}/mysql5/metadata_mysql5.xmi'>
      <replace path='${xpath.DATABASE_JDBC_URL}' withText='MYSQL' />
      <replace path='${xpath.DATABASE_TYPE}' withText='MYSQL' />
    </xmltask>

    <xmltask source='${solutions.dir}/samples/metadata.xmi'
             dest='${build.solutions.dir}/oracle10g/metadata_oracle10g.xmi'>
      <replace path='${xpath.DATABASE_JDBC_URL}' withText='ORACLE' />
      <replace path='${xpath.DATABASE_TYPE}' withText='ORACLE' />
    </xmltask>

    <xmltask source='${solutions.dir}/samples/metadata.xmi'
             dest='${build.solutions.dir}/postgresql/metadata_postgresql.xmi'>
      <replace path='${xpath.DATABASE_JDBC_URL}' withText='POSTGRESQL' />
      <replace path='${xpath.DATABASE_TYPE}' withText='POSTGRESQL' />
    </xmltask>

  </target>

  <!--====================================================
		target: init-tomcat-solutions
		
		Description:
		Some solution files are different for tomcat, than jboss.
		For example, tomcat does not need the portal menu items.
		
		===================================================== -->

  <target name="init-tomcat-solutions">
    <mkdir dir="${stage.dir}/pentaho-solutions" />
    <copy todir="${stage.dir}/pentaho-solutions">
      <fileset dir="${solutions.dir}">
        <include name="system/custom/template.html" />
        <include name="system/custom/template-home.html" />
      </fileset>
    </copy>
  </target>

  <!-- =================================
        target: init-pentaho-hsqldb

        Initialize the sample hsqldb data.
        
        depends="pentaho.doc.init"
       ================================= -->
  <target name="pentaho.data.init">

    <mkdir dir="${build.data.dir}" />

    <copy todir="${build.data.dir}/hsqldb">
      <fileset dir="${data.dir}">
        <exclude name=".project" />
        <exclude name="**/mysql5/**" />
        <exclude name="**/oracle10g/**" />
        <exclude name="**/postgresql/**" />
      </fileset>
      <!-- fileset dir="${build.doc.dir}">
				<include name="license.txt" />
			</fileset -->
    </copy>

    <copy todir="${build.data.dir}/mysql5">
      <fileset dir="${data.dir}/mysql5" />
    </copy>

    <copy todir="${build.data.dir}/oracle10g">
      <fileset dir="${data.dir}/oracle10g" />
    </copy>

    <copy todir="${build.data.dir}/postgresql">
      <fileset dir="${data.dir}/postgresql" />
    </copy>

    <copy todir="${build.data.dir}/hsqldb/lib" file="${lib.dir}/hsqldb.jar" />

    <!-- this is needed when running tests on linux -->
    <chmod file="${start.hsqldb.path}" perm="700" />
    <chmod file="${stop.hsqldb.path}" perm="700" />
  </target>

  <!-- =================================
		  target: init-pentaho-javadoc

		  Create the build.javadoc.dir.
		 ================================= -->
  <target name="pentaho.javadoc.init">
    <mkdir dir="${build.javadoc.dir}" />
  </target>

  <!-- ===================================================================
      target: pentaho.doc.init

      Create the build.doc.dir and make replacements in the release notes
      and change log.
     =================================================================== -->
  <target name="pentaho.doc.init">
    <mkdir dir="${build.doc.dir}" />

    <copy todir="${build.doc.dir}" overwrite="true">
      <fileset dir="${license.dir}" includes="license.txt" />
    </copy>

    <copy todir="${build.starthere.dir}" overwrite="true">
      <fileset dir="${starthere.dir}" />
    </copy>

    <copy todir="${build.doc.dir}" file="${release.notes.dir}/${release.notes.file}" overwrite="true" />
    <copy todir="${build.doc.dir}" file="${release.notes.dir}/${changelog.file}" overwrite="true" />

    <replace file="${build.doc.dir}/${release.notes.file}"
             token="&lt;!-- release.major.number --&gt;"
             value="${release.major.number}" />
    <replace file="${build.doc.dir}/${release.notes.file}"
             token="&lt;!-- release.minor.number --&gt;"
             value="${release.minor.number}" />
    <replace file="${build.doc.dir}/${release.notes.file}"
             token="&lt;!-- release.milestone.number --&gt;"
             value="${release.milestone.number}" />
    <replace file="${build.doc.dir}/${release.notes.file}"
             token="&lt;!-- release.build.number --&gt;"
             value="${release.build.number}" />
    <replace file="${build.doc.dir}/${release.notes.file}"
             token="&lt;!-- release.candidate.token --&gt;"
             value="${release.candidate.token}" />
    <replace file="${build.doc.dir}/${release.notes.file}"
             token="&lt;!-- release.name --&gt;"
             value="${release.name}" />
    <replace file="${build.doc.dir}/${release.notes.file}"
             token="&lt;!-- release.date --&gt;"
             value="${current.date}" />

    <replace file="${build.doc.dir}/${changelog.file}"
             token="&lt;!-- release.major.number --&gt;"
             value="${release.major.number}" />
    <replace file="${build.doc.dir}/${changelog.file}"
             token="&lt;!-- release.minor.number --&gt;"
             value="${release.minor.number}" />
    <replace file="${build.doc.dir}/${changelog.file}"
             token="&lt;!-- release.milestone.number --&gt;"
             value="${release.milestone.number}" />
    <replace file="${build.doc.dir}/${changelog.file}"
             token="&lt;!-- release.build.number --&gt;"
             value="${release.build.number}" />
    <replace file="${build.doc.dir}/${changelog.file}"
             token="&lt;!-- release.candidate.token --&gt;"
             value="${release.candidate.token}" />
    <replace file="${build.doc.dir}/${changelog.file}" token="&lt;!-- release.name --&gt;" value="${release.name}" />
    <replace file="${build.doc.dir}/${changelog.file}" token="&lt;!-- release.date --&gt;" value="${current.date}" />
  </target>

  <!-- ======================================================================= 
        target: pentaho.scripts.init

        Description:
        - Copy scripts to the build directory and fix any end of line issues.
       ===================================================================== -->
  <target name="pentaho.scripts.init">
    <mkdir dir="${build.scripts.dir}" />

    <copy todir="${build.scripts.dir}">
      <fileset dir="${scripts.dir}">
        <exclude name="**/demo/**" />
        <exclude name="**/dev/**" />
      </fileset>
    </copy>

    <copy todir="${build.scripts.dir}/jboss/oracle10g">
      <fileset dir="${scripts.dir}/jboss/mysql5" />
    </copy>

    <copy todir="${build.scripts.dir}/jboss/postgresql">
      <fileset dir="${scripts.dir}/jboss/mysql5" />
    </copy>

    <copy todir="${build.scripts.dir}/tomcat/oracle10g">
      <fileset dir="${scripts.dir}/jboss/mysql5" />
    </copy>

    <copy todir="${build.scripts.dir}/tomcat/postgresql">
      <fileset dir="${scripts.dir}/jboss/mysql5" />
    </copy>

    <!-- fix up unix end of line chars 	-->
    <fixcrlf srcdir="${build.scripts.dir}" eol="unix" eof="remove" includes="**/*.sh" />
  </target>

  <!-- =================================
		 target: dist.init-dir

		 Create the dist dir.
		 ================================= -->
  <target name="dist.init-dir">
    <mkdir dir="${dist.dir}" />
  </target>


  <!-- ===================================================================
      target: source compressed package

      Zip the src directory.
     =================================================================== -->
  <target name="zip-pentaho-src">
    <zip destfile="${dist.dir}/pentaho_src-${release.number}.zip">
      <fileset dir="${server.src}" />
    </zip>
  </target>

  <!-- ===================================================================
      target: javadoc package

      Zip the javadoc.
     =================================================================== -->
  <target name="zip-pentaho-javadoc" depends="pentaho.javadoc.init, pentaho.doc.init">
    <javadoc destdir="${build.javadoc.dir}/docs/api"
             source="1.5"
             sourcepath="server/pentaho/src"
             access="public"
             use="true"
             notree="false"
             nonavbar="false"
             noindex="false"
             splitindex="true"
             author="true"
             version="true"
             nodeprecatedlist="false"
             nodeprecated="false"
             packagenames="org.pentaho.*, com.pentaho.*"
             excludepackagenames="org.pentaho.test.*, org.hibernate.*"
             doctitle="Pentaho BI Platform">
      <classpath refid="classpath" />
    </javadoc>

    <zip destfile="${dist.dir}/pentaho_javadoc-${release.number}.zip">
      <fileset dir="${build.javadoc.dir}" />
      <fileset dir="${build.doc.dir}" />
    </zip>
  </target>

  <!-- =================================
        target: zip-pentaho-sample-data

        Zip the sample data.
       ================================= -->
  <target name="zip-pentaho-sample-data" depends="pentaho.data.init">
    <zip destfile="${dist.dir}/pentaho_sample_data-${release.number}.zip">
      <zipfileset dir="${build.data.dir}/hsqldb" prefix="pentaho-data">
        <exclude name=".project" />
      </zipfileset>
    </zip>
  </target>

  <!-- =================================
        target: zip-pentaho-solutions

        Zip the sample solutions.
       ================================= -->
  <target name="zip-pentaho-solutions" depends="dist.init-dir, pentaho.metadata.init">
    <zip destfile="${dist.dir}/pentaho_solutions-${release.number}.zip">
      <zipfileset dir="${solutions.dir}" prefix="pentaho-solutions">
        <exclude name=".project" />
        <exclude name="**/samples/metadata.xmi" />
      </zipfileset>
      <zipfileset dir="${build.solutions.dir}/hsqldb" prefix="pentaho-solutions/samples">
        <include name="metadata_hsqldb.xmi" />
      </zipfileset>
      <zipfileset dir="${build.solutions.dir}/mysql5" prefix="pentaho-solutions/samples">
        <include name="metadata_mysql5.xmi" />
      </zipfileset>
      <!-- zipfileset dir="${build.doc.dir}" prefix="pentaho-solutions" / -->
    </zip>
  </target>

  <!-- =========================================================================
		   target: package-all-pentaho-tomcat-pcis

		   Create all the flavors of tomcat pcis.  zip/tar tomcat+hsqldb+mantle+oac
		   and zip/tar tomcat+mysql5+mantle+oac.
		 ======================================================================== -->
  <target name="package-all-pentaho-pcis"
          depends="zip-pentaho-tomcat-hsqldb-pci, zip-pentaho-tomcat-mysql5-pci, tar-pentaho-tomcat-hsqldb-pci, tar-pentaho-tomcat-mysql5-pci" />

  <!-- ============================================================
        target: zip-pentaho-tomcat-hsqldb-pci

        Create a Windows-based pentaho pci configured for tomcat and hsqldb.
        pentaho.doc.init, pentaho.scripts.init
       ========================================================= -->
  <target name="zip-pentaho-tomcat-hsqldb-pci" depends="dist.init-dir, pentaho.metadata.init, pentaho.data.init">
    <antcall target="zip-pentaho-tomcat">
      <param name="rdbms" value="hsqldb" />
      <param name="appserver.dir" value="${tomcat.dir}" />
    </antcall>
  </target>

  <!-- ==============================================================
        target: tar-pentaho-tomcat-hsqldb-pci

        Create a Unix-based pentaho pci configured for tomcat and hsqldb.
       ============================================================ -->
  <target name="tar-pentaho-tomcat-hsqldb-pci"
          depends="init.stage.pentaho, init-tomcat-solutions, pentaho.metadata.init, pentaho.data.init, pentaho.doc.init, pentaho.scripts.init">
    <antcall target="tar-gz-pentaho-tomcat">
      <param name="rdbms" value="hsqldb" />
      <param name="appserver.dir" value="${tomcat.dir}" />
    </antcall>
  </target>

  <!-- ========================================================
		  target: zip-pentaho-tomcat-mysql5-pci

		  Create a Windows-based pentaho  pci configured for tomcat and mysql.
		 ======================================================= -->
  <target name="zip-pentaho-tomcat-mysql5-pci"
          depends="dist.init-dir, init-tomcat-solutions, pentaho.metadata.init, pentaho.data.init, pentaho.doc.init, pentaho.scripts.init">
    <antcall target="zip-pentaho-tomcat">
      <param name="rdbms" value="mysql5" />
      <param name="appserver.dir" value="${tomcat.dir}" />
    </antcall>
  </target>

  <!-- =======================================================
		  target: tar-pentaho-tomcat-rdms-pci

		  Create a Unix-based pentaho pci configured for tomcat and mysql.
		 ======================================================== -->
  <target name="tar-pentaho-tomcat-mysql5-pci"
          depends="dist.init-dir, init-tomcat-solutions, pentaho.metadata.init, pentaho.data.init, pentaho.doc.init, pentaho.scripts.init">
    <antcall target="tar-gz-pentaho-tomcat">
      <param name="rdbms" value="mysql5" />
      <param name="appserver.dir" value="${tomcat.dir}" />
    </antcall>
  </target>


  <!-- =======================================================
		  target: prep-pentaho-tomcat

		  populate the server.dir with all required files.
		 ======================================================== -->
  <target name="prep-pentaho-tomcat" depends="init.stage.pentaho,stage-pentaho">
	  <copy todir="${stage.server.dir}">
			<dirset dir="${tomcat.dir}"/>
			<dirset dir="${jre.dir}"/>
		</copy>
  </target>

  <!-- =========================================================================
        target: tar-gz-pentaho-tomcat

        Tar-gz the pentaho pci for tomcat.

       ========================================================================== -->
  <target name="tar-gz-pentaho-tomcat">
    <tar destfile="${dist.dir}/pentaho_tomcat_${rdbms}-${release.number}.tar" longfile="gnu">
      <!-- include third-party licenses -->
      <tarfileset dir="${thirdparty.lib}/licenses" prefix="pentaho-biserver/licenses" />
      <!-- include tomcat -->
      <tarfileset dir="${appserver.dir}" prefix="pentaho-biserver/tomcat" mode="755">
        <!-- exclude server.xml. Include the one with updated datasources for specific rdbms -->
        <exclude name="**/conf/server.xml" />
      </tarfileset>
      <!-- include the updated server.xml -->
      <tarfileset file="${server.resource.dir}/tomcat/${rdbms}/server.xml"
                  fullpath="pentaho-biserver/tomcat/conf/server.xml" />
      <!-- include the pentaho sample data -->
      <tarfileset dir="${build.data.dir}/${rdbms}" prefix="pentaho-biserver/data" mode="755" />
      <!-- include all of the pentaho wars -->
      <tarfileset dir="${build.wars.dir}/tomcat/${rdbms}/expanded/pentaho.war"
                  prefix="pentaho-biserver/tomcat/webapps/pentaho" />
      <tarfileset dir="${server.resource.dir}/styles/pentaho-style.war"
                  prefix="pentaho-biserver/tomcat/webapps/pentaho-style" />
      <tarfileset dir="${server.resource.dir}/styles/sw-style.war" prefix="pentaho-biserver/tomcat/webapps/sw-style" />
      <!-- include the pentaho sample solutions -->
      <tarfileset dir="${solutions.dir}" prefix="pentaho-biserver/pentaho-solutions">
        <exclude name=".dummy" />
        <exclude name=".project" />
        <!-- exclude this. portal menu is removed for tomcat -->
        <exclude name="**/template-home.html" />
        <exclude name="**/template.html" />
        <!-- exclude this. The build has modified it. Grab it from /build/pentaho-solutions -->
        <exclude name="**/samples/metadata.xmi" />
      </tarfileset>
      <!-- include the new tomcat template-home.html and template.html -->
      <tarfileset dir="${stage.dir}/pentaho-solutions" prefix="pentaho-biserver/pentaho-solutions">
        <include name="**/system/**" />
      </tarfileset>
      <!-- grab the modified metadata.xmi -->
      <tarfileset dir="${build.solutions.dir}/${rdbms}"
                  fullpath="pentaho-biserver/pentaho-solutions/samples/metadata.xmi">
        <include name="metadata_${rdbms}.xmi" />
      </tarfileset>
      <tarfileset dir="${build.scripts.dir}/tomcat/${rdbms}" prefix="pentaho-biserver" mode="755" excludes="**/*.bat" />
      <tarfileset dir="${build.doc.dir}" prefix="pentaho-biserver" />
    </tar>

    <gzip destfile="${dist.dir}/pentaho_tomcat_${rdbms}-${release.number}.tar.gz"
          src="${dist.dir}/pentaho_tomcat_${rdbms}-${release.number}.tar" />

    <!-- remove the tar -->
    <delete file="${dist.dir}/pentaho_tomcat_${rdbms}-${release.number}.tar" />
  </target>

  

</project>