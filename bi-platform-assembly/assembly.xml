<!-- In order for this build file to be referenced by name on import into other build files, 
     it's much nicer to have a short name with no spaces. Please don't change it. -->
<project name="Open_Assembly" basedir="." default="" xmlns:ivy="antlib:org.apache.ivy.ant">

  <!-- =================================================================================
       Property Defaults
       Any of these properties can be overridden in either assembly.properties or override.properties
       =================================================================================-->

  <!-- Load the properties files in the proper order -->
  <property file="override.properties"
            description="Properties customized for your development environment belong in this file.  This file will never be checked into the SCM." />
  <property file="assembly.properties"
            description="Properties customized for your particular project belong in this file." />

  <!-- subfloor property overrides -->
  <property name="package.id" value="biserver-ce" />
  <!-- the impl properties are used to create the manifest file -->
  <property name="impl.title" value="Pentaho BI Platform Community Edition" />
  <property name="impl.version" value="${project.revision}" />
  <property name="impl.vendor" value="Pentaho Corporation" />

  <!-- Import the ant script that includes targets share between manual and archive-based assemblies -->
  <import file="build-res/assembly_shared.xml" />

  <property name="bi.platform.open.assembly.dir" value="." />

  <!-- custom platform assembly properties -->
  <property name="rdbms" value="hsqldb" description="Default database for open assembly is hsqldb" />
  <property name="stage.dir.server" value="${stage.dir}/${package.id}" />
  <property name="package-res-archive.dir" value="${bi.platform.open.assembly.dir}/package-res-archive" />
  <property name="container.stage.dir" value="${stage.dir.server}/tomcat" />
  <property name="container.deploy.dir" value="${stage.dir.server}/tomcat/webapps" />
  <property name="prep.pentaho.war.dir" value="${stage.dir.server}/tomcat/webapps/pentaho" />
  <property name="prep.pentaho.war.lib.dir" value="${prep.pentaho.war.dir}/WEB-INF/lib" />
  <property name="prep.pentaho.war.classes.dir" value="${prep.pentaho.war.dir}/WEB-INF/classes" />
  <property name="prep.pentaho.war.meta.dir" value="${prep.pentaho.war.dir}/META-INF" />
  <property name="container.lib.dir" value="${stage.dir.server}/tomcat/lib" />
  <property name="stage.data.dir" value="${stage.dir.server}/data" />
  <property name="admin-console.name" value="administration-console" />
  <property name="admin-console.dir" value="${stage.dir}/administration-console" />
  <property name="plugins.dir" value="plugins" />
  <property name="solution-archives.dir" value="solution-archives" />

  <!-- default relative project paths -->
  <property name="bi.platform.appserver.dir" value="../bi-platform-appserver" />
  <property name="bi.platform.data.access.dir" value="../bi-platform-data-access" />
  <property name="bi.platform.engine.services.dir" value="../bi-platform-engine-services" />
  <property name="bi.platform.plugin.actions.dir" value="../bi-platform-plugin-actions" />
  <property name="bi.platform.sample.data.dir" value="../bi-platform-sample-data" />
  <property name="bi.platform.sample.solution.dir" value="../bi-platform-sample-solution" />
  <property name="bi.platform.util.dir" value="../bi-platform-util" />
  <property name="bi.platform.web.dir" value="../bi-platform-web" />
  <property name="bi.platform.web.portlet.dir" value="../bi-platform-web-portlet" />
  <property name="bi.platform.web.servlet.dir" value="../bi-platform-web-servlet" />
  <property name="bi.platform.repository.dir" value="../bi-platform-repository" />
  <property name="hibernate.hbm.dir" value="../bi-platform-repository/res/hibernate" />
  <property name="admin-console.res.dir" value="${package-res-archive.dir}/${admin-console.name}" />
  <property name="solution.dir.server" value="${stage.dir.server}/pentaho-solutions" />
  <property name="system.solution.dir" value="${solution.dir.server}/system" />
  <property name="bi-developers.solution.dir" value="${solution.dir.server}/bi-developers" />
  <property name="bi-developers.visible" value="true" description="Should the bi-developers samples be visible" />


  <!-- ================================= 
          target: assemble
         ================================= -->
  <target name="assemble" depends="assemble-no-plugins,install-plugins" description="Assembles an archive-based BIServer community edition"/>


  <!-- - - - - - - - - - - - - - - - - - 
          target: assemble-no-plugins                      
         - - - - - - - - - - - - - - - - - -->
  <target name="assemble-no-plugins"
          depends="check-blacklist,assemble-styles,assemble-pentaho-webapp,assemble-tomcat-biserver,validate-mantle-svn-revisions,install-management-console,install-solutions,init-pentaho-data,install-resources">
    <chmod perm="a+x" dir="${stage.dir}" includes="**/*.sh" />
  </target>


  <!-- ================================= 
            target: package
           ================================= -->
  <target name="package"
          depends="install-plugins,package-zip,package-targz"
          description="Packages an previously assembled archive-based BIServer community edition" />


  <!-- ================================= 
          target: clean-all              
         ================================= -->
  <target name="clean-all" depends="subfloor.clean-all">
    <delete dir="${plugins.dir}" />
    <delete dir="${solution-archives.dir}" />
  </target>


  <!-- - - - - - - - - - - - - - - - - - 
          target: package-zip (override to include jre folder in windows variant)                  
         - - - - - - - - - - - - - - - - - -->
  <target name="package-zip" depends="package.init">
    <zip destfile="${dist.dir}/${package.basename}.zip">
      <zipfileset dir="${stage.dir}" />
      <zipfileset dir="${jre.dir}" prefix="${package.id}/jre" />
    </zip>
  </target>


  <!-- - - - - - - - - - - - - - - - - - 
          target: assemble.styles                  
         - - - - - - - - - - - - - - - - - -->
  <target name="assemble-styles" depends="assemble-pentaho-style-webapp,assemble-sw-style-webapp" />


  <!-- - - - - - - - - - - - - - - - - - 
          target: install-resources                      
         - - - - - - - - - - - - - - - - - -->
  <target name="install-resources" />


  <!-- - - - - - - - - - - - - - - - - - 
      private target: init.stage.pentaho                      
     - - - - - - - - - - - - - - - - - -->
  <target name="init.stage.pentaho">
    <mkdir dir="${dist.dir}" />
    <mkdir dir="${lib.dir}" />
    <mkdir dir="${admin-console.dir}" />
    <mkdir dir="${stage.dir.server}/tomcat" />
    <mkdir dir="${prep.pentaho.war.dir}" />
    <mkdir dir="${container.deploy.dir}" />
  </target>


  <!-- - - - - - - - - - - - - - - - - - 
          target: assemble-pentaho-style-webapp                   
         - - - - - - - - - - - - - - - - - -->
  <target name="assemble-pentaho-style-webapp" depends="init.stage.pentaho">
    <copy todir="${container.deploy.dir}/pentaho-style">
      <fileset dir="${bi.platform.appserver.dir}/webapps/pentaho-style">
        <include name="**/**" />
      </fileset>
    </copy>
  </target>


  <!-- - - - - - - - - - - - - - - - - - 
          target: assemble-sw-style-webapp (steel wheels)                     
         - - - - - - - - - - - - - - - - - -->
  <target name="assemble-sw-style-webapp" depends="init.stage.pentaho">
    <copy todir="${container.deploy.dir}/sw-style">
      <fileset dir="${bi.platform.appserver.dir}/webapps/sw-style">
        <include name="**/**" />
      </fileset>
    </copy>
  </target>


  <!-- - - - - - - - - - - - - - - - - - 
          target: assemble-tomcat-biserver   
      		This is the primary target for setting up the container structure
      		and the structure for the wars that will go into the container.  This
      		task does not zip, tar or compress.                            
         - - - - - - - - - - - - - - - - - -->
  <target name="assemble-tomcat-biserver" depends="install-antcontrib,init.stage.pentaho">
    <sequential>

      <!-- Copy pure tomcat 5.5.26 -->
      <copy todir="${stage.dir.server}/tomcat">
        <fileset dir="${tomcat.dir}">
          <exclude name="webapps/balancer/**" />
          <exclude name="webapps/jsp-examples/**" />
          <exclude name="webapps/examples/**" />
          <exclude name="webapps/servlets-examples/**" />
          <exclude name="webapps/tomcat-docs/**" />
          <exclude name="webapps/docs/**" />
          <exclude name="webapps/webdav/**" />
          <exclude name="webapps/ROOT/**" />
          <exclude name="server/webapps/**" />
          <exclude name="conf/Catalina/*/*manager.xml" />
          <exclude name="bin/setclasspath.bat" />
        </fileset>
      </copy>

      <!-- Copy overlay files into tomcat -->
      <copy todir="${stage.dir.server}/tomcat" overwrite="true">
        <fileset dir="${package-res-archive.dir}/tomcat" />
      </copy>

      <!-- Copy required jars to lib -->
      <mkdir dir="${stage.dir.server}/tomcat/lib" />
      <copy todir="${stage.dir.server}/tomcat/lib">
        <fileset dir="${lib.dir}">
          <include name="hsqldb-*.jar" />
          <include name="mysql-connector-*.jar" />
          <include name="postgresql*.jar" />
          <include name="naming*.jar" />
          <include name="commons-el.jar" />
          <include name="jsp-api.jar" />
          <exclude name="jasperreports-*.jar" />
        </fileset>
      </copy>


      <!-- Add libs needed by tomcat -->
      <copy todir="${stage.dir.server}/tomcat/server/lib">
        <fileset dir="${lib.dir}">
          <include name="cglib*.jar" />
          <include name="jaxen*.jar" />
        </fileset>
      </copy>

	<antcall target="assemble-pentaho-webapp"/>
      
      <!-- Add scripts to appropriate locations based on desired rdbms -->
      <if>
        <equals arg1="${rdbms}" arg2="hsqldb" />
        <then>
          <copy todir="${stage.dir.server}">
            <fileset dir="${package-res-archive.dir}/scripts/tomcat/hsqldb">
              <include name="**" />
            </fileset>
            <fileset dir="${package-res-archive.dir}/scripts/tomcat/general">
              <include name="**" />
            </fileset>
          </copy>
        </then>
      </if>
      <if>
        <equals arg1="${rdbms}" arg2="mysql5" />
        <then>
          <copy todir="${stage.dir.server}">
            <fileset dir="${package-res-archive.dir}/scripts/tomcat/mysql5">
              <include name="**" />
            </fileset>
            <fileset dir="${package-res-archive.dir}/scripts/tomcat/general">
              <include name="**" />
            </fileset>
          </copy>
        </then>
      </if>

      <!-- Replace tomcat's setclasspath.bat -->
      <copy todir="${stage.dir.server}/tomcat/bin">
        <fileset dir="${package-res-archive.dir}/scripts/tomcat">
          <include name="*.bat" />
        </fileset>
      </copy>


      <!-- Explode the mantle generated files -->
      <unzip dest="${prep.pentaho.war.dir}">
        <fileset dir="${lib.dir}" includes="mantle-package-*.zip" />
      </unzip>

      <!-- Add licenses -->
      <copy todir="${stage.dir.server}/licenses">
        <fileset dir="${bi.platform.open.assembly.dir}/licenses">
          <include name="**/**" />
        </fileset>
      </copy>

    </sequential>

  </target>
  
  <!-- - - - - - - - - - - - - - - - - - 
          target: prep-pentaho-webapp                    
         - - - - - - - - - - - - - - - - - -->
    <target name="assemble-pentaho-webapp">
      <!-- Add general libs -->
      <copy todir="${prep.pentaho.war.lib.dir}">
        <fileset dir="${lib.dir}">
          <include name="*.jar" />
          <exclude name="servlet-api-*.jar" />
          <exclude name="gwt-user-*.jar" />
          <exclude name="hsqldb-*.jar" />
          <exclude name="mysql-connector-*.jar" />
          <exclude name="postgresql*.jar" />
          <exclude name="*-sources.jar" />
        </fileset>
      </copy>

      <!-- Add manifest -->
      <mkdir dir="${prep.pentaho.war.meta.dir}" />
      <manifest file="${prep.pentaho.war.meta.dir}/MANIFEST.MF">
        <attribute name="Implementation-Title" value="${impl.title}" />
        <attribute name="Implementation-Version" value="${impl.version}" />
        <attribute name="Implementation-Vendor" value="${impl.vendor}" />
      </manifest>

      <!-- Add rdbms context -->
      <copy file="${bi.platform.appserver.dir}/tomcat/res/datasources/${rdbms}/context.xml"
            todir="${prep.pentaho.war.meta.dir}" />

      <!-- Add the Pentaho webapp -->
      <copy todir="${prep.pentaho.war.dir}">
        <fileset dir="${bi.platform.appserver.dir}/webapps/pentaho">
          <exclude name="**/WEB-INF/default-object.xml" />
          <exclude name="**/WEB-INF/jboss-app.xml" />
          <exclude name="**/WEB-INF/jboss-portlet.xml" />
          <exclude name="**/WEB-INF/jboss-web.xml" />
          <exclude name="**/WEB-INF/portlet-instances.xml" />
        </fileset>
      </copy>
      <delete dir="${prep.pentaho.war.dir}/.settings" />

      <!-- Add additional Pentaho resources -->
      <copy todir="${prep.pentaho.war.classes.dir}">
        <fileset dir="${bi.platform.plugin.actions.dir}/src/org/pentaho/platform/plugin/action/jfreereport/res" />
        <fileset dir="${bi.platform.plugin.actions.dir}/src/org/pentaho/platform/plugin/action/mondrian/res" />
        <fileset dir="${bi.platform.plugin.actions.dir}/res/log4j" />
        <fileset dir="${bi.platform.engine.services.dir}/res/ehcache" />
      </copy>
    </target>


  <!-- ===================================================================
      target: install-management-console
      
      Installs the Open Admin Console from the pentaho-open-admin-console.zip
      file in the lib directory. Once installed, a few settings in the 
      configuration file will need to be tweaked.          
     =================================================================== -->
  <target name="install-management-console">
    <!-- Explode the Open Admin Console -->
    <unzip dest="${stage.dir}">
      <fileset dir="${lib.dir}" includes="pentaho-open-admin-console-*.zip" />
    </unzip>

    <!-- Update the Admin Console's config.xml file -->
    <copy file="${admin-console.res.dir}/resource/config/console.xml"
          tofile="${admin-console.dir}/resource/config/console.xml"
          overwrite="true" />
  </target>

  <!--====================================================
          macrodef: set-solution-visibility          
          
          Sets the visible attribute for a pentaho solution
          directory.
        ==================================================-->
  <macrodef name="set-solution-visibility">
    <attribute name="dir" />
    <attribute name="visible" default="true" />
    <sequential>
      <!-- Set the visible value of the specified directory -->
      <!--  ... replace <visible>...</visible> with <visible>@{visible}</visible> -->
      <echo message="Setting visibility=@{visible} for directory [@{dir}]..." />
      <replaceregexp file="@{dir}/index.xml"
                     match="&lt;visible&gt;.*&lt;/visible&gt;"
                     replace="&lt;visible&gt;@{visible}&lt;/visible&gt;" />
    </sequential>
  </macrodef>



  <!-- - - - - - - - - - - - - - - - - - 
          target: install-solutions                      
         - - - - - - - - - - - - - - - - - -->
  <target name="install-solutions" depends="resolve-solutions">
    <sequential>
      <mkdir dir="${solution.dir.server}/tmp" />
      <copy todir="${solution.dir.server}">
        <fileset dir="${bi.platform.sample.solution.dir}">
          <include name="**/**" />
        </fileset>
      </copy>

      <!-- Set the visible value of the sample dirs -->
      <set-solution-visibility dir="${bi-developers.solution.dir}" visible="${bi-developers.visible}" />

      <!-- copy db specific changes into system -->
      <mkdir dir="${system.solution.dir}/tmp" />
      <copy todir="${system.solution.dir}" overwrite="true">
        <fileset dir="${system.solution.dir}/dialects/${rdbms}">
          <include name="**/**" />
        </fileset>
      </copy>

      <!-- install solution archives -->
      <unzip dest="${solution.dir.server}" overwrite="true">
        <fileset file="${solution-archives.dir}/*.zip" />
      </unzip>

      <!-- Set the visible value of the sample dirs -->
      <set-solution-visibility dir="${bi-developers.solution.dir}" visible="${bi-developers.visible}" />
    </sequential>
  </target>

  <!-- - - - - - - - - - - - - - - - - - 
          target: install-plugins                      
         - - - - - - - - - - - - - - - - - -->
  <target name="install-plugins" depends="resolve-plugins">
    <unzip dest="${system.solution.dir}" overwrite="true">
      <fileset file="${plugins.dir}/*.zip" />
    </unzip>
  </target>


  <!-- - - - - - - - - - - - - - - - - - 
          target: init-pentaho-data                      
         - - - - - - - - - - - - - - - - - -->
  <target name="init-pentaho-data">

    <mkdir dir="${stage.data.dir}" />

    <!-- Explode the sample data dist -->
    <unzip dest="${stage.data.dir}">
      <fileset dir="${lib.dir}" includes="pentaho-bi-platform-sample-data-*.zip" />
    </unzip>

  </target>

  <!--=======================================================================
		        unified-platform-javadoc
		    
		        cleans, resolves, generates and copies all platform javadocs serially.  This
		        target also creates the unified zip/tar of the sources as well.
		        Note the release process depends on this target working this way, please
		        talk to the release manager if you need to change this target.
		        ====================================================================-->

  <property name="bi.javadoc.list"
            value="../bi-platform-api,
										 ${bi.platform.util.dir},
										 ../bi-platform-engine-core,
		                 ../bi-platform-test-foundation,
										 ../bi-platform-engine-security,
										 ${bi.platform.engine.services.dir},
		 								 ${bi.platform.data.access.dir},
										 ${bi.platform.repository.dir},
										 ../bi-platform-ui-foundation,
										 ${bi.platform.plugin.actions.dir},
										 ../bi-platform-scheduler,
										 ../bi-platform-legacy,
										 ${bi.platform.web.dir},
										 ${bi.platform.web.servlet.dir},
										 ${bi.platform.web.portlet.dir}" />

  <!-- Setup the javadoc classpath -->
  <path id="jdoc.classpath">
    <fileset dir="${lib.dir}">
      <include name="*.jar" />
    </fileset>
    <fileset dir="../mantle/lib">
      <include name="*.jar" />
    </fileset>
  </path>

  <target name="unified-platform-javadoc"
          description="Generates unified javadoc source documentation for the open bi platform">
    <sequential>
      <delete dir="${unified.javadoc.dir}" />
      <property name="unified.javadoc.dir" value="${basedir}/javadoc/bi_platform" />
      <mkdir dir="${unified.javadoc.dir}/src" />
      <property name="unified.javadoc.src" value="${unified.javadoc.dir}/src" />
      <property name="java.incl" value="**/*.java" />
      <property name="test.excl" value="**/test/**" />
      <property name="com.excl" value="**/com/**" />

      <!-- iterate through the module list and copy src -->

      <for list="${bi.javadoc.list}" param="module" trim="true">
        <sequential>
          <copy todir="${unified.javadoc.src}">
            <fileset dir="@{module}/src">
              <include name="${java.incl}" />
              <exclude name="${test.excl}" />
              <exclude name="${com.excl}" />
            </fileset>
            <fileset dir="../mantle/source">
              <include name="${java.incl}" />
              <exclude name="${test.excl}" />
              <exclude name="${com.excl}" />
            </fileset>
          </copy>
        </sequential>
      </for>
      <javadoc destdir="${unified.javadoc.dir}"
               access="public"
               source="1.5"
               use="true"
               notree="false"
               nonavbar="false"
               noindex="false"
               splitindex="true"
               author="true"
               version="true"
               sourcepath="${unified.javadoc.src}"
               packagenames="org.pentaho.*"
               maxmemory="256M"
               nodeprecatedlist="false"
               nodeprecated="false"
               doctitle="Pentaho BI Platform documentation">
        <classpath refid="jdoc.classpath" />
        <link href="http://java.sun.com/j2se/1.5.0/docs/api/" />
      </javadoc>
      <move todir="${basedir}/dist/bi-server-ce-${project.revision}-all-sources" dir="${unified.javadoc.dir}">
        <fileset dir="${unified.javadoc.src}" />
      </move>
      <zip destfile="bi-server-ce-${project.revision}-all-sources.zip"
           basedir="${dist.dir}/bi-server-ce-${project.revision}-all-sources" />
      <tar destfile="bi-server-ce-${project.revision}-all-sources.tar.gz"
           basedir="${dist.dir}/bi-server-ce-${project.revision}-all-sources"
           compression="gzip" />
      <delete dir="${dist.dir}/bi-server-ce-${project.revision}-all-sources" />
    </sequential>
  </target>

  <target name="validate-mantle-svn-revisions" unless="suppress-svn-validation">
    <sequential>
      <mkdir dir="${basedir}/temp/mantle" />
      <mkdir dir="${basedir}/temp/mantle-pkg" />

      <property name="mantle.rev" value="${project.revision}.${build.id}" />
      <property name="mantle.pkg.rev" value="${project.revision}.${build.id}" />

      <unjar src="${prep.pentaho.war.lib.dir}/mantle-${project.revision}.jar" dest="${basedir}/temp/mantle" />
      <unzip src="${lib.dir}/mantle-package-${project.revision}.zip" dest="${basedir}/temp/mantle-pkg" />

      <loadfile property="mantle.rev" srcFile="${basedir}/temp/mantle/META-INF/MANIFEST.MF">
        <filterchain>
          <linecontains>
            <contains value="Implementation-Version" />
          </linecontains>
        </filterchain>
      </loadfile>

      <loadfile property="mantle.pkg.rev" srcFile="${basedir}/temp/mantle/META-INF/MANIFEST.MF">
        <filterchain>
          <linecontains>
            <contains value="Implementation-Version" />
          </linecontains>
        </filterchain>
      </loadfile>
      <if>
        <equals arg1="${mantle.rev}" arg2="${mantle.pkg.rev}" />
        <then>
          <echo message="Mantle SVN revisions in sync" />
          <delete dir="${basedir}/temp" />
        </then>
        <else>
          <fail message="Mantle SVN revisions out of sync.  Currently reporting: ${mantle.rev} / ${mantle.pkg.rev}.  Please correct and rebuild. " />
        </else>
      </if>
    </sequential>
  </target>

</project>
