<!--===========================================================================
  This is the build file for the Pentaho BI Platform Plugin Services project.
  
  This build file will use the common_build.xml file as the default build
  process and should only override the tasks that need to differ from
  the common build file.
  
  See common_build.xml for more details
============================================================================-->
<project name="Plugin Services" basedir="." default="jar" xmlns:ivy="antlib:org.apache.ivy.ant">

  <description>
	  This build file is used to create the Plugin Services project
		and works with the common_build.xml file.
	</description>

  <!-- Import the common_build.xml file which contains all the default tasks -->
  <import file="common_build.xml" />

  <!--
      AS STATED ABOVE, THE ONLY TASKS THAT SHOULD EXIST IN THIS BUILD FILE ARE
      THE TASKS THAT NEED TO DIFFER FROM THE DEFAULT IMPLEMENTATION OF THE TASKS
      FOUND IN common_build.xml.
    -->

  <!--=======================================================================
	    compile.compile
	    
	    Performs the actual compile
	    ====================================================================-->
  <target name="compile.compile" depends="init" description="Performs the actual javac compile">
    <javac destdir="${classes.dir}"
           debug="${javac.debug}"
           deprecation="${javac.deprecation}"
           fork="true"
           source="${javac.source}"
           target="${javac.target}">
      <classpath>
        <path refid="classpath" />
      </classpath>
      <src path="cache/src" />
      <src path="connections/src" />
      <src path="messages/src" />
      <src path="outputs/src" />
      <src path="security/src" />
      <src path="versionchecker/src" />
    </javac>
  </target>


  <!--=======================================================================
	    compile.src_copy
	    
	    Copies the source files to the bin directory
	    NOTE: if the dont.copy.source variable exists, this step will be
	          skipped!
	    ====================================================================-->
  <target name="compile.src_copy"
          depends="init"
          unless="dont.copy.source"
          description="Copies the source to the bin directory">
    <copy todir="${classes.dir}" flatten="false">
      <fileset dir="cache/src" />
      <fileset dir="connections/src" />
      <fileset dir="outputs/src" />
      <fileset dir="security/src" />
      <fileset dir="messages/src" />
      <fileset dir="versionchecker/src" />
    </copy>
  </target>


  <!--=======================================================================
	    compile-tests
	    
	    Compiles project test source
	    ====================================================================-->
  <target name="compile-tests" depends="init-tests" description="Compiles project test source">
    <javac destdir="${testclasses.dir}"
           debug="true"
           optimize="false"
           source="${javac.source}"
           target="${javac.target}"
           fork="true">
      <classpath refid="test.classpath" />
      <src path="cache/test-src" />
      <src path="connections/test-src" />
      <!-- no tests: src path="messages/test-src"/ -->
      <src path="outputs/test-src" />
      <src path="security/test-src" />
      <src path="versionchecker/test-src" />
    </javac>
  </target>


  <!--=======================================================================
	    test
	    
	    Compiles and runs all the tests for the project
	    ====================================================================-->
  <target name="test" depends="compile,compile-tests" description="Compiles and runs unit tests">

    <junit dir="cache" printsummary="yes" haltonfailure="${junit.haltonfailure}">
      <classpath refid="test.classpath" />
      <formatter type="plain" />
      <batchtest fork="yes" todir="${testbin.dir}">
        <fileset dir="cache/test-src" casesensitive="yes">
          <include name="**/Test*.java" />
          <include name="**/*Test.java" />
        </fileset>
        <fileset dir="connections/test-src" casesensitive="yes">
          <include name="**/Test*.java" />
          <include name="**/*Test.java" />
        </fileset>
        <fileset dir="outputs/test-src" casesensitive="yes">
          <include name="**/Test*.java" />
          <include name="**/*Test.java" />
        </fileset>
        <fileset dir="security/test-src" casesensitive="yes">
          <include name="**/Test*.java" />
          <include name="**/*Test.java" />
        </fileset>
        <fileset dir="versionchecker/test-src" casesensitive="yes">
          <include name="**/Test*.java" />
          <include name="**/*Test.java" />
        </fileset>
      </batchtest>
    </junit>
  </target>


  <!--=======================================================================
	    cobertura.test-instrumented
	    
	    Runs tests against instrumented classes and generates xml and html JUnit test reports
	    ====================================================================-->
  <target name="cobertura.test-instrumented"
          depends="init-test-reports,cobertura.install,compile,compile-tests,cobertura.instrument-classes">
    <mkdir dir="${instrumented.classes.dir}" />
    <junit fork="yes" failureProperty="test.failed" haltonfailure="${junit.haltonfailure}">

      <!--
				Specify the name of the coverage data file to use.
			-->
      <sysproperty key="net.sourceforge.cobertura.datafile" file="${cobertura.data.dir}/cobertura.ser" />

      <!--
				Note the classpath order: instrumented classes are before the
				original (uninstrumented) classes.  This is important.
			-->
      <classpath location="${instrumented.classes.dir}" />
      <classpath location="${classes.dir}" />
      <classpath location="${testclasses.dir}" />
      <classpath refid="test.classpath" />
      <classpath refid="cobertura.classpath" />

      <formatter type="xml" />
      <test name="${testcase}" todir="${testreports.xml.dir}" if="testcase" />
      <batchtest todir="${testreports.xml.dir}" unless="testcase">
        <fileset dir="cache/test-src" casesensitive="yes">
          <include name="**/Test*.java" />
          <include name="**/*Test.java" />
        </fileset>
        <fileset dir="connections/test-src" casesensitive="yes">
          <include name="**/Test*.java" />
          <include name="**/*Test.java" />
        </fileset>
        <fileset dir="outputs/test-src" casesensitive="yes">
          <include name="**/Test*.java" />
          <include name="**/*Test.java" />
        </fileset>
        <fileset dir="security/test-src" casesensitive="yes">
          <include name="**/Test*.java" />
          <include name="**/*Test.java" />
        </fileset>
        <fileset dir="versionchecker/test-src" casesensitive="yes">
          <include name="**/Test*.java" />
          <include name="**/*Test.java" />
        </fileset>
      </batchtest>
    </junit>

    <junitreport todir="${testreports.html.dir}">
      <fileset dir="${testreports.xml.dir}">
        <include name="TEST-*.xml" />
      </fileset>
      <report format="frames" todir="${testreports.html.dir}" />
    </junitreport>
  </target>


  <!--=======================================================================
	    cobertura.xml-report
	    
	    Produces machine-readable xml Cobertura coverage report from results of instrumented tests
	    ====================================================================-->
  <target name="cobertura.xml-report" depends="cobertura.test-instrumented">
    <cobertura-report destdir="${coberturareports.xml.dir}" datafile="${cobertura.data.dir}/cobertura.ser" format="xml">
      <fileset dir="cache/src">
        <include name="**/*.java" />
      </fileset>
      <fileset dir="connections/src">
        <include name="**/*.java" />
      </fileset>
      <fileset dir="outputs/src">
        <include name="**/*.java" />
      </fileset>
      <fileset dir="security/src">
        <include name="**/*.java" />
      </fileset>
      <fileset dir="versionchecker/src">
        <include name="**/*.java" />
      </fileset>
    </cobertura-report>
  </target>


  <!--=======================================================================
	    cobertura.html-report
	    
	    Produces human-readable html Cobertura coverage report from results of instrumented tests
	    ====================================================================-->
  <target name="cobertura.html-report" depends="cobertura.test-instrumented">
    <cobertura-report destdir="${coberturareports.html.dir}"
                      datafile="${cobertura.data.dir}/cobertura.ser"
                      format="html">
      <fileset dir="cache/src">
        <include name="**/*.java" />
      </fileset>
      <fileset dir="connections/src">
        <include name="**/*.java" />
      </fileset>
      <fileset dir="outputs/src">
        <include name="**/*.java" />
      </fileset>
      <fileset dir="security/src">
        <include name="**/*.java" />
      </fileset>
      <fileset dir="versionchecker/src">
        <include name="**/*.java" />
      </fileset>
    </cobertura-report>
  </target>


  <!--=======================================================================
	    javadoc
	    
	    Generates javadoc source documentation for this project
	    ====================================================================-->
  <target name="javadoc"
          depends="javadoc.init, compile"
          description="Generates javadoc source documentation for this project">
    <javadoc destdir="${javadoc.dir}/docs/api"
             access="public"
             source="1.5"
             use="true"
             notree="false"
             nonavbar="false"
             noindex="false"
             splitindex="true"
             author="true"
             version="true"
             maxmemory="256M"
             nodeprecatedlist="false"
             nodeprecated="false"
             packagenames="${javadoc.packagenames}"
             sourcepath="${src.dir}"
             doctitle="${impl.title} documentation">
      <sourcepath>
        <pathelement path="cache/src" />
        <pathelement path="connections/src" />
        <pathelement path="messages/src" />
        <pathelement path="outputs/src" />
        <pathelement path="security/src" />
        <pathelement path="versionchecker/src" />
      </sourcepath>
      <link href="http://java.sun.com/j2se/1.5.0/docs/api/" />
      <classpath refid="classpath" />
    </javadoc>
  </target>
</project>
